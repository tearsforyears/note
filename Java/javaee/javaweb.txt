# javaweb

[TOC]

# jsp(略作了解即可 耦合性太差)

本质是模板 借助引擎编译成servlet的类html语法

	<%! jsp code %> # 声明
	<% jsp code %> # 表达式
	jsp指令
		@page
		@include
		@taglib
	动作指令
	<jsp:forward page="path">
	<jsp:include file="path">
	转发与插入
	<jsp:useBean id="instance_name" class="" scope="">
	# scope = request session application page
	<jsp:setProperty name="instance_name" property="" value="">
	<jsp:getProperty name="">
	jsp 内置对象
		servlet-api.jar
	  request response
	  config
	  session
		application
	jsp.api.jar
	  out
	  exception
	  page pageContext
# JDBC

```java
Class.forName("com....")
// 这句话有两种作用 一种解耦合 因为字符串可以通过配置改
// new class() 只能改代码
// 第二句就是加载类 JVM不需要清理没有引用的对象 

String url = "jdbc:mysql//localhost:3306/springdemo";
Connection conn = DriverManager.getConnection(url,user,pass);

Statement st = conn.createStatement();
ResultSet res = st.executeQuery(sql);
// 遍历resultset
// conn.prepareCall() // 存储过程

// PerpareStatement 是 Statement的子类
PrepareStatement ppsm = conn.prepareStatement("sql");
ppsm.setString(1,"10");
ppsm.setString(2,"bitch"); // 对占位符进行赋值
ResultSet res = ppsm.executeQuery();

// ResultSet 采用古代的油标遍历方法 我们这里遍历出一个list
// 建议封装成集合
List<String> ls = new ArrayList<>();
while(res.next()){
  ls.add(res.getObjct("name")); // .getString
}
```
# servlet

	1.继承HttpServlet @Override doGet doPost方法
	2.配置urlPattern
	
	resp.sendRedirect("...")
	req.getRequestDispatcher("...").forward(req,resp)
		重定向和转发,
		重定向:浏览器的重定向请求 window.location.href = "..."
		转发:服务器内部转发请求资源
		重定向可以重定向到任何域
		转发只能本域
		重定向的相对路径/是相对域名的
		转发的/是相对于项目的
		
	@WebSevlet(urlPatterns={"/test"}) // 利用注解配置
	
	- web.xml
	<servlet>
	    <servlet-name>loginServlet</servlet-name>
	    <servlet-class>com.example.LoginServlet</servlet-class>
	</servlet>
	<servlet-mapping>
	    <servlet-name>loginServlet</servlet-name>
	    <url-pattern>/login</url-pattern>
	</servlet-mapping>
# Filter和Listener

这两个东西是实现web框架的关键技术

## Filter

```note
Filter的原理是拦截请求加上处理交给下一层拦截器 相当于方法增强(装饰器)的手段
Listener则是监听某一事件的发生 当时间发生了之后监听器会执行相应的代码
```

```note
Filter分为以下几种
1.用户授权Filter 检查用户请求过滤非法请求
2.日志Filter
3.负责解码的Filter
实现Filter
1.实现javax.servlet.Filter接口
2.web.xml中进行配置 或者利用注解配置
```

```java
@WebFilter(filterName = "TestFilter", urlPatterns = {"/*"})
public class TestFilter implements Filter {
  	/* 常规设置编码等 */
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        // 处理请求前的拦截
        HttpServletRequest httpServletRequest = ((HttpServletRequest) servletRequest);
        httpServletRequest.setCharacterEncoding("UTF-8");
        System.out.print(httpServletRequest.getRemoteAddr() + "->");
        System.out.println(httpServletRequest.getRequestURI());
        servletResponse.setContentType("text/html;charset=utf-8");
        servletResponse.setCharacterEncoding("UTF-8");
        servletResponse.getWriter().write("<html lang='en'><head><meta charset='utf-8'/></head><body>");

        filterChain.doFilter(servletRequest, servletResponse);

        // 处理请求后的拦截 想象调用层次
        servletResponse.getWriter()..flush();
        servletResponse.flushBuffer();
    }
		// ....
}
```

```xml
<filter>
  <filter-name>test</filter-name>
  <filter-class></filter-class>
</filter>
<filter-mapping>
	<filter-name>test</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>
<!--如果有多个filter的调用链是按web.xml中顺序去执行的-->
@WebFilter配置的时候可以通过名字去控制执行的顺序不过挺麻烦的
```

登录授权拦截

```java
		@Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
      HttpServletRequest req = (HttpServletRequest) servletRequest;
    	HttpSession s = req.getSession();
      if(s.getAttribute("user_token")!=null){
        req.getRequestDispatcher("/login").forward(req,servletResponse);
      }else{
      	filterChain.doFilter(servletRequest, servletResponse);
      }
      
    }
```

## Listener

Listener顾名思义监测某些事件的发生和触发器机制差不多

其可以监听ServletContext,HttpSession,ServletRequest的创建销毁修改等

HttpSessionListener 可以用来统计在线人数

ServletContextListener 加载初始化信息 销毁时信息记录

利用上面两个Listener可以实现PV统计和持久化

HttpSessionBindingListener 用于监听Session绑定和解绑 说白就是Session中key增加

-   ### HttpSessionActivationListener 活化钝化

    实现此接口的JavaBean,可以感知自己被活化(从硬盘到内存)和钝化(从内存到硬盘)的过程。

    活化钝化又称序列化和反序列化

    实现这个接口的JavaBean不用配置到web.xml中

    配置Tomcat的活化和钝化

    ```xml
    <!-- 通过配置实现钝化和活化
      className="org.apache.catalina.session.PersistentManager"  固定写法
      maxIdleSwap(单位：秒): 最大空闲时间，超过这个时限还未使用session,则会自动钝化
      FileStore：通过该类具体实现钝化操作
      directory: 钝化所在路径 相对路径（tomcat目录所在径/work/Catalina/localhost/项目名）
     -->
    <Manager className="org.apache.catalina.session.PersistentManager" maxIdleSwap="5">
      <Store  className="org.apache.catalina.session.FileStore" directory="lq"/>
    </Manager>
    ```

    

```java
// 原生序列化的实现
// static和transient成员变量不可被序列化
String path = "/JavaObject/test.obj"; 
MyClass myClass = new MyClass();
ObjectOutputStream oos = new ObjectOutStream(new FileOutputStream(path));
oos.writeObject(myClass); // 线程安全

ObjectInputStream ois = new ObjectInputStream(new FileOutputStream(path));
myClass = (MyClass) ois.readObject();
```



javaweb启动顺序Listener->Filter->Servlet

# 生成war部署到Tomcat

Module -> add dependencies

Artifacts -> add from Module // output dir="/target/classes" // 人工部署 部署的东西全在里面

Run Configuration -> Deployment(or new) ApplicationContext /

# 数据校验相关

数据检验Hibernate有很多实现的方式 但我认为基于计算力和负载而言 能放在前端的校验就不要放在后端

数据格式的校验全权交由前端

数据存在性的校验只能交给后端去实现 例如用户名是否重复等

# struts2

```xml
request->struts_filter->(action_class)->model->db
工程目录配置
- src
  - struts.xml
- webContent
  - web.xml
web.xml编写
<web-app></web-app> 根元素
<filter></filter>
<filter-mapping></filter-mapping>
<listener>
  <listener-class></listener-class>
  <servlet></servlet>
  <servlet-mapping></servlet-mapping>
<filter>
  
配置拦截器web.xml
  <filter-name>struts2</filter-name>
  <filter-class>
 org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter 
		</filter-class>
  </filter>
  <filter-mapping>
  <filter-name>struts2</filter-name>
  <filter-url>/*</filter-url>
  </filter-mapping>
```
# 编写Action
```java
Action是该框架的核心控制器
用于返回视图的名字从而forward到相应的jsp页面
forward之前进行数据的封装处理
其有三种实现方式
  1.POJO
  2.extends SupportAction
  3.implements Action
public class HelloAction implements Action{
  private String message;
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  @Override
  public String execute() {		//处理用户请求
    if ((this.message.equals("")) || (this.message == null)) {
      message = "请输入问候语";
    }
    return "success";
  }
}
```
# 配置struts.xml
```xml
	<struts>
    <!--package 有namespace属性-->
    <package name="com" extends="struts-default">
      <!--默认method为execute-->
      <!--action这个name很重要 /namespace/hello 这个url可以访问-->
      <!--也可以hello.action 也可以全类名-->
      <action name="hello" class="class_name" method="execute">
        <result name="success">/hello.jsp</result>
        <!--对应上面的Action返回的success字符串-->
      </action>
    </package>
  </struts>
<!--
	url访问是/hello.action!execute这种形式 !后表示执行的方法
	使用spring的注解可以简化路径的配置
	<action name="*Action" class="org.crazyit.app.action.LoginRegistAction" method="{1}">
	这种匹配方式也可以 url=loginAction时,访问{1}=login
-->
<!--
	result有name和type属性 type 默认为dispatcher 就是forward
	可以设置type="redirect" location=""
	type="redirectAction" actionName="" namespace=""
-->
<!--
	可以导入其他配置文件
	<include file=".xml">
-->

```
# struts.properties
```xml
	<!--/WEB-INF/classes/struts.properties-->
	<!--用于管理k-v常量-->
	<constant name="key" value="value">
```

# 校验

```java
public class ValidateTest extends ActionSupport {
	//省略属性及其set、get方法
	public String login() {	//用于登录
		return "login";
	}
	public String regist() {	//用于注册
		return "regist";
	}
	public void validate() {	//相同的校验
	//省略校验代码
	}
		public void validateLogin() {//只对login()方法的请求执行校验
		//省略校验代码
	}
		public void validateRegist() {//只对regist()方法的请求执行校验
		//省略校验代码
	}
}
使用这种约定的方式对方法进行检验

```
# Xwork进行校验
```xml
在相应的action下创建LoginAction-validation.xml
<field name="birth">
  <field-validator type="date">
  <!-- 下面指定日期字符串时，必须使用本Locale的日期格式 -->
  <param name="min">1900-01-01</param>
  <param name="max">2050-02-21</param>
  <message>生日必须在${min}到${max}之间</message>
  </field-validator>
</field>
常用的校验器(valiator)
  required validator(必填校验器)
  requiredstring validator(必填字符串校验器)
  stringlength validator(字符串长度校验器)
  regex validator(表达式校验器)
  email validator(邮件校验器)
  url validator(网址校验器)
  int validator(整数校验器)
  double validator(双精度数校验器)
```

# 拦截器filter

```xml
继承prepareable接口实现prepare方法
struts.xml
<interceptor name=”interceptorName” class=”interceptorClass”>
	<param name="paramName">paramValue</param>
</interceptor>

多个interceptors
<package name="default" extends="struts-default" >
  <interceptors>
	   <!--定义两个拦截器，拦截器名分别为interceptor1和interceptor2-->
        <interceptor name="interceptor1" class=”interceptorClass”/>
        <interceptor name="interceptor2" class=”interceptorClass”/>
	   <!--定义一个拦截器栈，拦截器包含了两个拦截器-->
        <interceptor-stack name="myStack">
          <interceptor-ref name="interceptor1"/>
          <interceptor-ref name="interceptor2"/>
        </interceptor-stack>
  </interceptors>
</package>
在action中配置拦截器
<action>
  <result name="">
  <interceptor-ref name="interceptor_name">
</action>
继承interceptor接口
    实现init destory intercept方法
如果要拦截方法 继承 MethodFilterInterceptor
    实现doIntercept
```

# 上传下载

```xml
default.properties中配置上传下载的解析器
# struts.multipart.parser=cos
# struts.multipart.parser=pell
struts.multipart.parser=Jakarta
struts.xml
<action name="upload" class="com.upload.UploadAction">
	<!--声明Action使用的拦截器fileUpload-->
	<interceptor-ref name="fileUpload">
		<!-- 设置允许上传的文件类型为gif和jpg -->
		<param name="allowedTypes">image/gif,image/jpeg</param>
		<!-- 设置允许上传文件大小，最大为20k -->
		<param name="maximumSize">20480</param>
	</interceptor-ref>
	<!-- 配置Struts 2的默认拦截器栈 -->
	<interceptor-ref name="defaultStack" />
	<!-- 上传失败时返回的视图页面 -->
	<result name="input">/upload.jsp</result>
	<result name="success">/success.jsp</result>
</action>

```

# hibernate

```java
一个简单的存储demo 和所有orm框架一样.save和.commit是实现数据库提交的重要方法
public static void main(){
  Configuration conf = new Configuration().configure();
  SessionFactory sf = conf.buildSessionFactory();
  Session sess = sf.openSession();
  Transaction tx = sess.beginTransaction();
  News n = new News();
  n.setTitle("The Memory of 5.12");
  n.setContent("What?");	
  sess.save(n);
  tx.commit();
}
public static void main(){
  Configuration conf = new Configuration().configure();
  SessionFactory sf = conf.buildSessionFactory();
  Session sess = sf.openSession();
  List ls = sess.createQuery("select * from users where age<20").list();
}
### 支持参数化查询 ":key" .setString("key","value")


```

-   ## hibernet配置信息

```xml
持久化类 xxx.java
映射文件 xxx.hbm.xml
配置文件 hibernate.cfg.xml
- pojo.hbm.xml
	类的关系映射信息
	和pojo.java类同级
  <hibernate-mapping package="package_name">
    <class name="class_name" table="table_name">
      <id name="id">
        <generator class="identity"/>
      </id>
      <property name="title"/>
      <property name="content"/>
    </class>
  </hibernate-mapping>
- hibernate.cfg.xml
	/WEB-INF/classes/hibernate.cfg.xml
	<hibernate-configuration>
	<session-factory>
		<property name="connection.driver_class">
      com.mysql.jdbc.Driver
    </property>
		<property name="connection.url">
      jdbc:mysql://localhost:3307/hibernate
    </property>
		<property name="connection.username">
      root
    </property>
		<property name="connection.password">
      mysql
    </property>
		<property name="hibernate.c3p0.max_size">20</property>
		<property name="hibernate.c3p0.min_size">1</property>
		<property name="hibernate.c3p0.timeout">5000</property>
    <!-- 指定连接池里最大缓存多少个Statement对象 -->
		<property name="hibernate.c3p0.max_statements">100</property>
		<property name="hibernate.c3p0.idle_test_period">3000</property>
		<property name="hibernate.c3p0.acquire_increment">2</property>
		<property name="hibernate.c3p0.validate">true</property>
		<!-- 指定数据库方言 -->
		<property name="dialect">
      org.hibernate.dialect.MySQLInnoDBDialect
    </property>
		<!-- 根据需要自动创建数据表 -->
		<property name="hbm2ddl.auto">update</property>
    <!--
      <property name="show_sql">true</property>
      <property name="hibernate.format_sql">true</property>
		-->
		<!-- 罗列所有的映射文件 使用文件路径而不是包名-->
		<mapping resource="org/crazyit/app/domain/pojo.hbm.xml"/>
	</session-factory>
</hibernate-configuration>
可以配置依赖
<class name="User" table="USER">
   <id name="userid" type="int" access="field">
    <column name="USERID" />
    <!--外键依赖-->
    <generator class="foreign">
    	<param name="property">address</param>
    </generator>
   </id>
  <property name="name"  type="java.lang.String">
    <column name="NAME" />
  </property>

```

