# annotation 注解

java的注解结合反射是spring一些简洁语法的核心

其为jdk1.5之后引入的一种机制

class method variable 和 参数 包等都可以被标注

每个annotation接口有1个RetentionPolicy(注解保留的时期 比如编译时运行时)

SOURCE,CLASS,RUNTIME

每个annotation接口有一个或多个ElementType

TYPE,FIELD,METHOD,PARAMETER,

CONSTRUTOR,LOCAL_VARIABLE,ANNOTATION_TYPE,PACKAGE

### 基本注解

-   @Override

-   @Deprecated 过时方法

-   @SuppressWarnings 去掉编译警告

### 元注解(作用于其他注解上的注解)

-   @Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。
-   @Documented - 标记这些注解是否包含在用户文档中。
-   @Target - 标记这个注解应该是哪种 Java 成员。
-   @Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)

### 使用

```java
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@interface ano{
    String str() default "test"; // java把这理解为一个没有方法体的方法
    int val() default 3;
    /**
     * 这么写 可以用下面这种方法标注
     * @ano(val = 3,str = "test")
     * 只有一个参数的情况下可以省略写成@ano(3)
     * 并且注解内写成 int value() default 3;
     */
}
```

### 利用反射调用注解

```java
class pojo {
    private String field;

    @ano(val = 3, str = "test")
    public void run() {
        System.out.println("run method");
    }

    public String getField() {
        return field;
    }

    public void setField(String field) {
        this.field = field;
    }
}

public class test {
    public static void main(String[] args) throws Exception{
        Method m = pojo.class.getMethod("run");
//        m.invoke(new pojo());
        ano a = m.getAnnotation(ano.class);
        System.out.println(a.str());
    }
}
```

### 模拟JUnit

```java
package com.annot;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Method;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@interface Test {
}

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@interface Before {
}
public class simple_junit {
    @Test
    public void test() {
        System.out.println("test method invoke");
    }

    @Before
    public void test2(){
        System.out.println("test2");
    }
    public static void main(String[] args) throws Exception {
        Method[] ms = simple_junit.class.getMethods();
        simple_junit sj = new simple_junit();
        for (Method m : ms) {
            if (m.isAnnotationPresent(Test.class)) {
                m.invoke(sj); // add to test queue
            }
        }
    }
}
```

### jdbc注解配置

```java

```

### 总结

注解相当于给方法加上额外的参数

这些参数可以在其他类中通过反射获得

比如注解路由的实现 其思路就是在框架执行的时候

加载servlet(extends) 注册固定路由的方法(annotation)

