#coding=utf-8
'''
#上楼梯问题
def f(n):
    if n==1:
        return 1
    if n==2:
        return 2
    return f(n-2)+f(n-1)
#print f(100)
#上楼梯问题
def f(n):
    lis = []
    for i in range(n):
        lis.append(-1)
    lis[0]=1
    lis[1]=2
    for i in range(2,n):
        lis[i]=lis[i-1]+lis[i-2]
    """制作哈希表完成"""
    return lis[n-1]
#递归备忘录算法
dict={1:1,2:2}
def f(n,dict):
    if n<0:
        return 0
    if dict.get(n)!=None:
        return dict.get(n)
    if dict.get(n)==None:
        dict[n]=f(n-1,dict)+f(n-2,dict)
        return dict[n]
#print f(500,dict)
#一维度的动态规划，把空间利用率降下来了
def f(n):
    if n<0:
        return 0
    if n==1:
        return 1
    if n==2:
        return 2
    a = 1
    b = 2
    temp = 0
    for i in range(2,n):
        temp=a+b
        a=b
        b=temp
    return temp
#print f(500)
'''
"""最优子结构 边界 状态转移方程/"""
#金矿问题，求最优化策略
"""data"""
N=5
"""金矿数量"""
W=10
"""工人数"""
G=[400,500,200,300,350]
"""金矿含黄金量"""
P=[5,5,3,4,3]
"""开发所需人数"""
def fu(N,W,G,P):
    lis=[]
    temp_lis=[]
    for i in range(P[0]-1):
        lis.append(0)
        temp_lis.append(0)
    for i in range(W-P[0]+1):
        lis.append(G[0])
        temp_lis.append(0)
    """初始化数据"""
    print lis
    for j in range(1,N):
        for i in range(W):
            if i-P[j]+1==0:
                #这个边界是一个巨大的陷阱如果我减小到本身的话 比如第二行第4个(从0开始)如果按照下面比较就i-P[j]==-1<0就没法进行赋值 如果按照下面的话
                #就会等于引用前面400的值或者不引用 这样有可能造成下面表的错误
                temp_lis[i]=max(G[j],lis[i])
            if i-P[j]>=0:
                temp_lis[i]=max(lis[i],lis[i-P[j]]+G[j])

        #lis=temp_lis #不这样做为了避免对象传递的问题
        for i in range(len(lis)):
            lis[i]=temp_lis[i]
        print temp_lis

fu(N,W,G,P)