# hello world
	#include"iostream" 
	using namespace std;
	int main(){
		cout<<123;
		return 0;
	}
	#include"iostream"
	int main(){
		std::cout<<123;
		return 0;
	}
	//两种写法等价
# cout和printf的实现
	cout<<i++<<i++<<i++<<endl;
	这句话的执行顺序是从右往左,说明了内部数据结构是栈
# 值与地址
	c/c++是相对比较原始的语言,
	相比java等其对某些表达式进行了地址保护的机制c++在内存分配和地址上
	相对原生更接近底层,也说明了此时我们需要用地址和内存去考虑c++的所有机制	

	表达式的值与地址:
	普通表达式:左值 i=3的地址与i的地址相同 //前提是有定义
	逗号表达式:(3,5,4,5,2) //其值为2,其地址为最后一个元素的值

	i++与++i的实现(左值和右值)
	i++
		temp=i
		i+=1
		return i
	++i
		i+=1
		return i
# const
	赋值只有一次 相当于java的final关键字
	常量指针,本质是指针,指向常量。
	指针常量,本质是常量,只不过这个常量是指针类型的。
	指向常量的常量指针	
# static变量
	内存形式无需多言
	c++中其作用域是全局
# 数组内存分配
	int arr[10];//此时内存已经被分配
	//也就是说类该初始化就初始化,gcc的堆内存已经有了空间
	//并且栈内存中出现了arr引用
	java相关
	//其他语言处理机制略有不同java是在new的时候分配内存;
# inline和预定义
	#define f(x,y) (x)/(y) 
	inline为内联函数,其原理基本一致
	都是把代码段填充到需要的位置
	只不过预定义的时候记住这是简单拿字符串的形式添加上去了而已
# 多文件结构
	# model.h
		//interface
	# model.cpp
		#include"model.h"
		//实现
	# main.cpp
		#include"model.h"
# 命名空间
	使用 using namespace std;
	定义
	namespace name1{
		class Name{

		};
	}
# 字符串
	可以像c语言那样编写
	#include"string"
	string str1 = "hello world";
	str1.size() //字符串的长度
# 简单面向对象
	1.简单例子
		class Line
		{
		   public:
		      void setLength( double len );
		      double getLength( void );
		      Line();  // 这是构造函数
		 	  ~Line(); // 这是析构函数
		   private:
		      double length;
		};
		 
		// 成员函数定义，包括构造函数
		Line::Line(void) //同名参与定义
		{
		    cout << "Object is being created" << endl;
		}
		 
		void Line::setLength( double len )
		{
		    length = len;
		}
		Line::~Line(void)
		{
		    cout << "Object is being deleted" << endl;
		}
	2.控制类内部访问
		public,private,protected关键字
	3.简单继承
		继承有三种public,private,protected
		这三种关键字的区别在于把基类的public和protected的成员继承成什么样的
		比如public继承下来的保持原样,private继承下来的都当作是子类的private成员
		注意继承的是基类的public和protected,private不被继承
		有个原则就是类的访问权限可能被限制但是绝对不会被提高
	4.访问声明
		可以提高基类成员的访问性但是不能降低
		class B{
			public:int a;
			private:int b;
			protected:int c;
		}
		class D:private B{
			 public:
			 	B::a;
			 protected：
			 	B::c;
			 	B::a;	//错误 不能降低访问性
		}
# 面向对象
	1.类内定义的静态成员初始化 
		class ClassName{
			static int staticMember;
		}
		int ClassName::staticMember=value;
		//以这种方式进行静态成员的初始化,静态成员也一定要利用这种方式进行初始化
	2.友元
		友元可以是函数也可以是类,友元可以调用定义友元类的private成员
		friend关键字可定义
		friend int function(ClassName& a){}
		friend class ClassName;
	3.参数初始式
		在类的继承体系中,初始化是个很重要的过程
		通常从基类往派生类进行初始化,而参数初始式就可以传递参数
		注意是传递参数,与参数初始式的顺序无关,下面的例子
		表明了初始化的顺序不会随着初始式的改变而改变
		初始式的另一个用法是对本类的成员进行初始化
		class A{
			public:
			A(int x):a(x){};
			//等价于
			//A(int x){this->a=x};
			int a;
		}
	4.常成员函数
		首先得是类的成员函数,然后在后面加入const关键字
		其使得this指针变成指向常量,换句话说就是
		常成员函数无法修改类的数据成员
	5.虚继承,虚函数,抽象类,纯虚函数
		所谓的虚是指复用
		
		虚继承为了解决菱形继承时重复继承同一父类的问题
		语法就是在继承的时候时使用virtual关键字修饰相同的父类

		虚函数解决的问题是不同类型的函数指针在调用的时候可以依赖对象地址的类型
		调用不同版本的函数,简单的理解就是等着被override的,但是在c++中叫重载

		纯虚函数类似抽象方法,语法如下,没有实现的代码体
		virtual void area() const = 0

		抽象类含有抽象方法(纯虚函数),不可被实例化,只能被派生,利用子类实现某些功能

# 面向对象的例子
	class B{
		public:
			int b;
			B(int x=10){
				this->b=x;
				cout<<"B "<<this->b<<endl;
			}
			~B(){
				cout<<"B destory"<<endl;
			}
	};
	class B1:virtual public B{//虚继承
		public:
			int b1;
			B1(int x1=11,int y1=21):B(x1)
			{
				this->b1=y1;
				cout<<"B1 "<<this->b1<<endl;
			}
			~B1(){
				cout<<"B1 destory"<<endl;
			}
	};
	class B2:virtual public B{//虚继承
		public:
			int b2;
			B2(int x2=12,int y2=22):B(x2){
				this->b2=y2;
				cout<<"B2 "<<this->b2<<endl;
			}
			~B2(){
				cout<<"B2 destory"<<endl;
			}
	};
	class D:public B1,public B2{
		public:
			int d;
			D(int i=1,int j=2,int k=3,int l=4):B(i),B1(j),B2(k){
				//参数初始式,只负责传递参数
				this->d=l;
				cout<<"D "<<this->d<<endl;
			}
			~D(){
				cout<<"D destory"<<endl;
			}
	};

# overload
	同名函数不同参数可以构成重载(类内)
	但c++也有默认参数机制
# 泛型模版
	template <typename T>
	T const& Max (T const& a, T const& b){ 
	    return a < b ? b:a; 
	}
# 阻塞
	#include<windows.h>
	Sleep(1000);