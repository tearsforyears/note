MongoDB
show dbs
show collections#collections=tables
db #查看当前数据库的名
use database_name #有我就直接用 没有我就创建
db.table_name.drop()#删除表
db.drop()#删除数据库

db.table_name.find()#查找表中所有数据
db.table_name.findOne()#查找其中一条

db.table_name.insert(dict)
db.table_name.insert(lis)#如下可以插入多个对象
db.table1.insert([{name:"zhangsan",age:12},{name:"zhangsan",age:12}])

db.table_name.remove({})#删除全部
db.table_name.remove({name:'sam'})#删除一个

db.table_name.update({name:'value'},{name:'new_value'})#改值第一个参数是条件
db.table_name.update({},{age:2},{multi:true})#无条件修改多条

db.test2.find().sort({age:1}) #查询出来的数据按年龄升序
db.test2.find().sort({age:-1})#查询出来的数据按年龄降序

因为mongodb不能使用数学符号所以用
(>) 大于 - $gt
(<) 小于 - $lt
(>=) 大于等于 - $gte
(<= ) 小于等于 - $lte
eq ne等
去代替些操作
db.col.find({"likes" : {$gt : 100}})#等价于找到likes>100的
$type判断数据类型
db.col.find({"title" : {$type : 'string'}})

.limit(NUMBER)#限制显示多少条数据
.skip(NUMBER)#跳过number条数据往下输出

嵌套实现关系
   "_id":ObjectId("52ffc33cd85242f436000001"),
   "contact": "987654321",
   "dob": "01-01-1991",
   "name": "Tom Benzamin",
   "address": [
      {
         "building": "22 A, Indiana Apt",
         "pincode": 123456,
         "city": "Los Angeles",
         "state": "California"
      },
      {
         "building": "170 A, Acropolis Apt",
         "pincode": 456789,
         "city": "Chicago",
         "state": "Illinois"
      }]
这样的数据address可以填充list
   "address_ids": [
      ObjectId("52ffc4a5d85242602e000000"),
      ObjectId("52ffc4a5d85242602e000001")
   ]
或者可以填充id作为引用
>db.users.findOne({"name":"Tom Benzamin"},{"address":1})
mongodb没有事物 深入做的话挺难的 有些特性没提