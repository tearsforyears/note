#mongodb数据库的安装
下载mongodb
新建立文件夹server/3.4/data/db server/3.4/data/log/mongo.log
#启动MongoDB
server/3.4/bin打开命令行 mongod --dbpath *****data/db
127.0.0.1:27027 测试运行成功
#mongo执行交互操作
配置成系统服务(据说4.0已配置好服务)
_________________________________________________________
下面介绍python和database的交互
MYSQL 3306
pip3 install pymysql
in script
#如果要实现数据库连接池 出门左转pymysqlpool
import pymysql as mysql
#查询
db=mysql.connect(host="127.0.0.1",user='root', password='root', db='store', port=3306)
cur=db.cursor()#获得光标
cur.excute("select * from user where id=10")#查询 pymysql执行参数化的时候用 %s 这种方法
res=cur.fetchall()
for item in res:print(item)
db.close()
#增加 删除 改
try:
cur.excute("
insert into user(id,username,usersalt,message) values('%s','%s','%s','%s')%(1,sam,no,no)
")#values等 记得带引号
cur.excute("delete from user where id=52")
cur.excute("update user set username='tom' where id=52")
db.commit()#改变表的结构要提交
...
except Exception as e:
    db.rollback()#记得要回滚
    raise e

________________________________________________


REDIS 6379
pip3 install redis
#基本框架
r=redis.Redis(host='127.0.0.1', port=6379,db=1)#普通连接
pool=redis.ConnectionPool(host='127.0.0.1', port=6379,db=1)
r=redis.Redis(connection_pool=pool)
pipe=r.pipeline(transaction=True)#用pipeline批量提交
r.keys()#得到key的集合 命令行是用 keys * #key pattern# 去获得值
r.set('key','value')#用这种数据结构存string的dict结构很好
#set一个机制是若存在则修改
r.get('key')
pipe,execute()

基本函数
r.expire(name ,time)#设置超时时间
r.randomkey()
r.type()

#String其他函数
r.setex(key,value,time)#设置过期时间s
r.psetex(key,value,time)#设置过期时间ms
r.mset(dict)#批量设置
r.mget(list)#批量获取
#r.getset(new_k,old_k)#改变原key值
r.setbit(name, offset, value)
r.getbit(name, offset)
r.bitcount(key, start=None, end=None)#获取对应二进制中1的个数
r.strlen()
r.incr(self, name, amount=1)#自增
r.decr(self, name, amount=1)#自减
r.append()#字符串的追加

#hash 应该是用最多的数据类型
r.hgetall(key)
r.hmget(*keys)
r.hmset(**dict)
r.hget(field)
r.hset(field,value)
#r.hlen()
#r.hkeys()
#r.hvals()
#r.hexits()
#r.hdel(*keys)

list #可以把list当成栈来用
r.lpush(key,list_vals)
r.lpop()#无参数
r.llen()
r.lpushx()#从左侧进入list
r.rpushx()#从右侧进入list
#当链表使用
r.lindex()
r.lrange(name,start,end)#切片获取
r.linsert(name, where, refvalue, value)) where="before" or "after"
r.linsert("list_name","BEFORE","2","SS")#在列表内找到第一个元素2，在它前面插入SS
r.lset(key,index,value)#更新值
r.lrem(key,value，num)#删除值 num=0删除全部 num=2 从前到后第二个 num=-2从后到前第二个

#不常用数据类型set sorted_set
#set
sadd(key,**values) 
smembers(key)
scard(key)#元素个数
sinter(keys, *args)#获取多个元素的并集
srandmember(name, numbers)#随机取出成员
srem(name, values)#set remove
#sorted_set
有序集合：
　　在集合的基础上，为每元素排序，元素的排序需要根据另外一个值来进行比较，所以，
对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。
zadd()
r.zadd("zset_name", "a1", 6, "a2", 2,"a3",5)
r.zadd('zset_name1', b1=10, b2=5)
zcard()
zcount(key,min,max)#数分数在这个区间的个数
zincrby(key, value, amount)
zscore(key, value)
zrank(name, value)、zrevrank(name, value)#排序
zrem(key,values)
---------------------------------------------------------------------------------
MongoDB 27017
from pymongo import MongoClient
三种连接方式
cli = MongoClient()
cli = MongoClient('localhost',27017)
cli = MongoClient('mongodb://localhost:27017')
#print(cli.list_database_names())
#print(db.list_collection_names())
db=cli.test#db=cli['test']
table=db.table2#table2=db['table2']
#或者可以使用api方法get...
""""查询"""
def query_all_from(table):
    for item in table.find():
        print(item)
核心方法table.find()生成迭代器

"""增加"""
table.insert(dict)增加一条
table.insert(list)增加len(lis)条
"""修改"""
table.update({name:...},{})#修改第一个符合条件的，修改内容
table.update_many({name:...},{})#修改所有条件，修改内容
table.update({'id':item.get('id')},{'$set':dict(item)},True)
"""删除"""
table.remove({})
table.remove({name:value})
table.delete_one()
table.delete_many()
