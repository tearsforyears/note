git 分布式控制
#源自于廖雪峰老师的blog
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000
疑问
	bash命令
	为什么分布式能提高效率那么多?
	SSH?
	分布式和多线程多进程部署的关系?
集中式和分布式
	集中式有中央服务器,用来管理全部提交的文件
	分布式也有,但是中央服务器仅仅提供数据交换的便利
常用命令
	git init#创建仓库
	git add file#添加文件到仓库
	git commit -m #那文件提交到仓库 m for message
	git status #查看仓库的状态
	git diff #可以查看文件的不同
	git log #查看最近版本的变化
	git reflog #查看每次使用的命令
	git clone ....#下载
	git remote add ... git@github.com:tearsforyears/....*.git#提交到自己github
git下载项目等
	git clone git@github.com:tearsforyears/gitlearn.git
	#下载自己的项目文件根路径 gitlearn
	git clone https://github.com/3b1b/manim.git
	下载3b1b大佬的视频库
	文件路径
		F:.
		│  readme.txt
		│
		└─gitlearn
		        clone.txt
		        readme.txt
git安装 sudo apt-get install git
一些名词解释
	LFS:large file support
	repository:仓库
	Working Directory:工作区
	工作区->stage->分支
安装完成后，还需要最后一步设置，在命令行输入：
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
bash命令
	pwd bash查看所在路径
	cat 查看文件内容
#时光机---版本回退 git reset --hard HEAD^
	git reset --hard HEAD^
	git reset --hard 04a19 #写版本号前几位
	git中head表示当前版本 head^ head^^表示之前的版本

	#######################################################
	--代表撤销 -代表切换分支 别记错了
	git checkout -- readme.txt #把文件在工作区的修改撤销 
	#优先恢复成缓存区的状态,如果没有或者已经提交恢复到commit的状态
	git reset HEAD readme.txt同样可以做到 撤销缓冲区的修改,恢复到工作区
	如果没送到远程仓库的话还可以考虑版本回退
	########################################################

	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

	总结:
	1.全部提交到版本库的情况 git reset 版本回退
	2.我tm工作区改错了
		git reset hard直接版本回退到前一个版本/前两个版本
		git checkout -- file 回退暂存区的文件/或者直接版本回退前一个版本
		#注意这玩意有空格
git分支管理:
	git checkout -b dev #创建dev分支,并切换到dev分支
	相当于两条命令
	git branch dev
	git checkout dev###checkout是切换分支的命令
	git branch #查看版本分支
	git merge dev #把dev分支合并到master
	git branch -d dev #删除dev分支
	关于版本分支修改的结果
		hasse@DESKTOP-SV89T1S MINGW64 /f/resourcefile/gitlearn (master)
		$ cat readme.txt
		#this is a gitlearn test file!
		git is a free software
		this is a test file for learning git
		hasse@DESKTOP-SV89T1S MINGW64 /f/resourcefile/gitlearn (master)
		$ git checkout dev
		Switched to branch 'dev'
		hasse@DESKTOP-SV89T1S MINGW64 /f/resourcefile/gitlearn (dev)
		$ cat readme.txt
		#this is a gitlearn test file!
		git is a free software
		this is a test file for learning git
		this is a branch test
		hasse@DESKTOP-SV89T1S MINGW64 /f/resourcefile/gitlearn (dev)
	关于提交双分支提交:
		$ git merge feature1
		Auto-merging readme.txt
		CONFLICT (content): Merge conflict in readme.txt
		Automatic merge failed; fix conflicts and then commit the result.
		查看当前状态
			$ git status
			On branch master
			Your branch is ahead of 'origin/master' by 2 commits.
			  (use "git push" to publish your local commits)
			You have unmerged paths.
			  (fix conflicts and run "git commit")
			  (use "git merge --abort" to abort the merge)
			Unmerged paths:
			  (use "git add <file>..." to mark resolution)
			        both modified:   readme.txt
			no changes added to commit (use "git add" and/or "git commit -a")
    --no-ff merge参数 禁止fastforward合并
    就用普通模式合并
git stash保存工作现场:#bug分支
	git stash#保存工作 打断点
	git stash list
	git stash pop#恢复现场
	git stash apply
	git stash drop
丢弃一个没有合并过的分支 git branch -D ....#要用大D
git多人协作
	#remote 远程的
	git remote add origin git@github.com:tearsforyears/gitlearn.git
	#origin表示远程的仓库名
	git remote remove origin
	#删除远程仓库

	git push <远程主机名> <本地分支名>:<远程分支名>
	git push origin master
	#origin是远程仓库的分支 master是本地的
	git push origin
	#删除远程分支 相当于本地分支为空的推送
	git checkout -b dev origin/dev


	当两次推送发生时:
	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
	git branch --set-upstream-to=origin/<branch> dev

	因此，多人协作的工作模式通常是这样：
	1.首先，可以试图用git push origin <branch-name>推送自己的修改；
	2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	3.如果合并有冲突，则解决冲突，并在本地提交；
	4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
	这就是多人协作的工作模式，一旦熟悉了，就非常简单。
分支策略
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	所以，团队合作的分支看起来就像这样：
git add commit原理
	index/stage 是git的缓冲区在/.git文件夹下
	git add 相当于把文件信息压入缓冲区中
	git commit 相当于把缓冲区文件提交到分支上
git删除文件
	#首先从文件系统删除
	git status 可以看到删除的情况
	git rm readme.txt #在git仓库中删除
	git checkout --readme.txt #这个命令的作用是从版本库恢复已经删除的文件
	#这才是git checkout的真正用法 相当于一键还原
github
	1.创建仓库
	2.git remote add origin git@github.com:tearsforyears/gitlearn.git
	#先把github的origin关联到本地仓库
	
	################################################################
	https://blog.csdn.net/hhhccckkk/article/details/50737077
	ssh公共秘药配置 commit失败
	
	#################################################################
	
	on github page
	…or push an existing repository from the command line
	git remote add origin git@github.com:tearsforyears/gitlearn.git
	git push -u origin master
	#上面这几行操作就可以把本地操作提交到github上了		
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	下次在提交的时候就可以把-u省略去了 git push origin master
标签
	git tag #查看所有标签
	git tag v0.1 #打标签
特殊配置
	1. .gitignore文件配置
	2.git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	这个之后看下lg命令简直超神
	3.git服务器搭建
	https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000

