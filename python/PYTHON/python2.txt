python基本语法
//不用写分好 不用写！
list [] append pop insert [index]//list-stack
tuple () 单元素 [index]		//array

//{"bananas":"2","apples":"5","cherries":"20"} JSON格式字符串和dict相同
//javascript中的object类中也定义了这种方法

dict  {} get ['key'] key-value //Map
set([]) add remove		//set

python 不支持表达式的值这种写法

for循环 for in循环请大量使用而不是用
for(int i;i<class.length();i++)
获取长度的方法len(data\list\tuple)
//python支持这种复制语法
f4,f5,f6=[1,5,8]
print f4,f5,f6 



字符串的拼接如果是两个字符串的话就直接加如果不是两个字符串的话就要用到join

r字符串 不需要经过转义 原样打印
r'''.......''' //支持多行文本
r'......'	//支持单行文本
u字符串，支持Unicode字符编码的字符串
u' '    //单行
u'''....'''//多行
字符串本身可以+拼接，但是必须是两个字符串
字符串的引用
//str = 'hello world'
//print str[0]  //result is h
//print str[1:3] //result is el //提供一个非正则的截取方法
L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3
如果第一个是0可省略成L[:3]
:表示从头到尾 //我为什么想起来了JQuery的味蕾选择器
L[::2]//表示每两个取一个也就是隔一个取一个
return '<tr><td>%s</td><td>%s</td></tr>' % (name, score)
//利用占位符来表示迭代占位的赋值

python把0 空字符串 和None看成False 其他看成True
表达式 True or False的结果是 True 如果是有值的字符串仍是该字符串

字符串拼接的时候不能用加号，因为str和int不能相加 使用，表示两个字符串的拼接


内置<有序>集合列表list		//JSON格式字符串				//[key:"value",key2,"value2"]
[?,?,?,?]
比如[None,'100',True,"hehe"]
定义一个变量去接受就可以了 列表可以为空
L=[1,2,3]
引用方法
L[0] //结果是1，等同于数组
L[-1]//结果是3，倒数第一
append("item");//把参数放到list最后
insert(2,"item");//在L[2]上插入一条数据 剩下往后挪
pop() //删除最后一个元素(Stack?)
pop(index) //删除第index个



tuple元组
//有序列表：一旦创建完成就不能更改了
t=('a','b','c')
t[0] t[-1] //可以访问不可以修改
单元素的tuple要用，就是t=(1,)

Python代码的缩进规则：具有相同的缩进规则被视为相同的代码块
使用4个空格不要用tab
pass语句表示空语句为了保证python结构的完整性

if语句
if   :
    print
    print   

else:
    print
    print
交互环境得多空出一行表示退出缩进

if-else-if

if      :
    print
elif    :
    print
elif    :
    print


for  :   //for item in Collection|Set :  // JAVA 
//for(Object item :HashSet)
//for each
//for name in L:
//    print name


dict 查找速度快,占用内存大，无顺序，元素不可变
//存放key-value
d={
    'adam' :95,
    'adam1':93,
    'adam2':91,
}
d['paul']=72 //添加新的键值对
d.get('adam') //读数据不用经过空判断的方法
通过key来调用value的方法d[key]

set
//set内部结构和dict很像但是set里面不存储value，无顺序
s=set(['a','b']) //给set()传入一个list



python内置函数
abs()
range(1,100)可以生成一个list从1到99 //非常强大 还可以指定第三个参数
//这玩意把for循环的所有机制基本都变成集合遍历了
enumerate(L) //L是一个列表对象，把列表对象包装成，因此每一个元素是一个tuple
[(0, 'Adam'), (1, 'Lisa'), (2, 'Bart'), (3, 'Paul')]
zip() //实现两个或者多个数组的拼接可以达到遍历的功能

//zip(L1,L2) //两个list拼接起来交错拼接 多个一样

就是enumerate(L)的原理
这玩意不是闲的蛋疼，而是有时候可能会调用索引的方法什么的
L.values() //返回一个list对象由value组成
L.itervalues()//同上 基本一样
dict.items() //返回dist对象
a.strip() //相当于 stringInstance.trim();
cmp(x,y)//比较函数，比较x，y相等返回0 <返回-1 >返回1



高阶函数 map\返回list\ reduce\返回结果\ filter
map(func,range(1,11)) //其中func是一个函数对象 返回一个新的列表
//和列表生成表达式的方式进行快速列表生成差不多
reduce(func,range(1,11))
//返回是五个数的共同函数运算，把前两个数的结果作为一个参数与第三个数构成函数
//类推
filter(func,range(1,11))//顾名思义过滤器
func是返回一个Boolean值的判断函数//来判断range里面那些数不符合条件
sorted(range(1,11),func)//顾名思义排序 //字符串可以直接比较大小
//func表示排序算法 func
//func可以写成 cmp=lambda s1,s2 :cmp(s1.upper(),s2.upper())

延迟计算
返回值是一个函数:直接上例子，返回函数不调用的话并不会有那啥
可以达到延迟计算的目地
def calc_prod(lst):

    def times():

        sum=1
   
        for item in lst:

            sum=sum*item

        return sum
   
    return times

f = calc_prod([1, 2, 3, 4])

print f()
延迟计算的两个例子
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f())
    return fs
f1,f2,f3=count()
print f1,f2,f3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f) //这句话在返回函数对象的时候还没有计算只有真正
    return fs	     //只有在真正调用的时候才会执行f内结构 所以
		     //真正执行的时候f的i停留在了3，毕包现象决定

f1, f2, f3 = count()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
匿名函数lambda  // label for
lambda x : x*x //匿名函数 参数列表为x 函数体进行乘方运算，不用return
//就是返回这个表达式的结果

修饰器 //注解
@improve                 ---------->   f=improve(f) 
def f(x):                              f(x)
    /* */
@performance
@transaction
@post('/register')
//这些注解标注在方法上作用是把方法的函数对象传入注解方法的参数中
//从而拿到函数对象进行一定的封装在函数之前进行一些方法的优化啊啥的
//或者打印日志，在之前和反射的invoke不一样 //不知道python有没有反射机制
//所以说装饰器就是一个before的反射优化方法
import time
def performance(f):
    def func(*args, **kw):    #增强方法
        t1 = time.time()
        r = f(*args, **kw)    #调用一下看执行时间
        t2 = time.time()
        print t2 - t1
        return r //虽然这里这么写了 但是实际上还是调用了参数
    return func

@performance
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))
print factorial(10)
//对于这种注解是空参数的直接获得对象就是了
//若是注解要带有参数的话就对函数封装两次
//第一次得到前缀第二次得到函数对象
//和上面举例一样吧
import time
def performance(prefix):	  #得到了注解传入的字符串
    def performance_improve(f):   #在这里获得了函数对象
        def func(*args, **kw):    #增强方法，可变长度参数，字典引用
            t1 = time.time()
            f(*args, **kw)    #调用一下看执行时间
            t2 = time.time()
            print t2 - t1，prefix
            return f(*args,**kw)    #传入参数给他返回对象的结果而不是对象
        return func
    return preformance_improve //除了最外层得和注解名字一样，其他随便起吧

@performance('这个方法打印的执行时间为：')
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))
print factorial(10)
//解释下func那行就是为了和f(获取到的函数对象)参数保持一致 因为实际运行实现
//这个机制的时候 执行的是func函数 所以他要使用f的参数去算去f的结果
//所以从f中获取参数

装饰器的完善
修饰器虽然在内部定义了增强方法，但是这意味着运行时候实际函数的某些属性发生了改变比如实际调用的参数列表名，方法名 等等，
要还原这些操作，防止调用者看到内部改造，就要把原函数的属性复制到新的函数中
利用Python内置的functools可以完成上述任务
import functools
@functools.wraps(f) //f指的是封装之前的函数对象和获得函数对象一样
标注在decorate最内层的方法上面因为这一层返回新的函数
要对这个函数的一些信息进行改变
//所以一般都标注在参数列表上剩下的函数完成
//递归封装该函数，因为获得对象或者注解字符串的函数不会实际执行增强方法
但是函数签名(函数列表和列表自定义的函数量没法改变:自适应参数)


@Connection
总结下 修饰器decorate定义的三层函数 获取注解参数 获取函数对象 获取函数参数(这个时候我们一般指定可变长度的参数还有添加对数组的引用，所以就是*args,**kw)

偏函数:指定某些指定参数返回一个新的函数对象
fuctools.partial是创建一个偏函数的
int2=functools.partial(int,base=2)
//新函数的函数名字=functools.partial(原来函数的名字，指定的参数固定值)

参数
可变长度参数func(*number) //加个星号就行 内部封装成一个tuple
可变长度的关键字参数func(**kw)//注意是关键字(keyword)参数
//不是tmd关键字，这种city='beijing'最后封装成一个dict对字典的引用
命名关键字func(*,city,town)
//city和town 输入的话必选用这两个参数的名字
参数定义的顺序必须是：
必选参数、默认参数、可变参数/命名关键字参数和关键字参数


必包
内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure)。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
列表生成表达式
[x * x for x in range(1, 11) if x % 2 == 0] 
//[列表生成元素表达式 for x in [2,5,3] if x % 2 == 1]//放入原始数据列表
//当然也可以直接使用range声称list 后面可以跟判断
列表声称表达式
[表达式 for in list if]
print [int('%d%d%d' %(x,y,x)) for x in range(1,10) for y in range(0,10)]
//'%d%d%d'%(x,y,x) 生成占位字符串的表达式
//int强制转换整个字符串 后面是查找语句

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
import 语句 导入工具包
自定义编写函数
def语句
//def my abs(x)
//    if x>=0:
//        return x
//    else:
//        return -x
//return可以没有 相当于返回None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
默认定义函数
int('',x) //转换为x进制的int
int('12345',base=8) //转换成8进制的 //Integer.parseInt()


由于函数的参数按从左到右的顺序匹配，所以默认参数只能定义在必需参数的后面：
agreet(xxx='world')//这种方式定义
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

模块的文件名(a.py)就是模块的名字
同名的模块放进不同的包里面，必须完整写包的所有信息
每一层包都得有__init__.py //这代表了包//
import math
from math import pow,sin,log as log1//包的from字句引入部分,同时给起别名
如果使用import导入模块名，由于必须通过模块名引用函数名，因此不存在冲突
//动态模块提供方法
如果要提高Python代码的运行速度，最简单的方法是把某些关键函数用 C 语言重写，这样就能大大提高执行速度。

安装第三方模块
自带pip
CMD命令 利用pip install web.py 就可以下载这样一个开发包
pypi.python.org //可以使用命令来安装


类似于try catch finally
try:
    from cStringIO import StringIO
except ImportError: //相当于catch，
    from StringIO import StringIO
finally:           //相当于finnaly
//这句话的意思是尝试着从cStringIO中导入StringIO 如果没有就导入StringIO
Python 3.x已经改进了整数的除法运算，“/”除将得到浮点数，“//”除才仍是整数


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
名词解释
函数签名:参数列表
wrap:包裹，包，缠绕，掩护
reduce:减少