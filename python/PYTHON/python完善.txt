建议67：基于生成器的协程和greenlet，理解协程、多线程、多进程之间的区别
建议69：对象的管理和垃圾回收
建议72：做paster创建包
使用C/C 模块扩展提高性能
建议16：分清==和is的适用场景，特别是在比较字符串等不可变类型变量时（详见评论）
建议26：深入理解None，正确判断对象是否为空。
建议40：深入掌握ConfigParser
建议41：使用argparse模块处理命令行参数
# python内省和反射
	内省则是通过一组外部方法去得知类的内部情况
	反射则是动态修改内部的方法
	# 反射(大杀器)
		反射即想到4个内置函数分别为:getattr、hasattr、setattr、delattr  获取成员、检查成员、设置成员、删除成员
		getattr可以获取对象方法变量等
		a = Animal()
	    getattr(a, 'run')() # 调用a的run方法
	    setattr(a,'name','animal') # 设置name属性的值为animal
	    delattr()
# 魔法函数,协议
	解释器可以调用的函数
	__gt__ # >
# 数据结构模块
	queue、heapq
	python3 import queue
	python2 import Queue
	queue.Queue
	queue.LifoQueue # lifo last in first out
	queue.PriorityQueue
	
# 浅拷贝和深拷贝
	浅拷贝是对于可变对象拷贝指针
	不可变对象重新复制一个新的值
	list就是典型的复制指针的数据类型
	list.copy()是一个浅拷贝的方法
	深拷贝可用pythonapi实现
	import copy
	copy.deepcopy()  
# lambda表达式
	relu: 0 if x>0 else 1
	f = lambda lis:lis**2 if type(lis) == int else list(map(lambda x: x**2,lis))
	f(3),f([1,2,3])的结果分别是 _,_
	A 9 
	B [9]
	C [1,4,9]
	D (1,4,9) # 1,4,9
	E 报错

	# 为什么编程是艺术呢
	abs = lambda x : x if x>=0 else -x
	floor = lambda x: int(x) 
	ceil = lambda : int(x) + 1
	fib = lambda n : 1 if n==1 or n==2 else fib(n-1) + fib(n-2)
# decorator深入
	def log(func):
	    def wrapper(*args, **kw):
	        print('call %s():' % func.__name__)
	        return func(*args, **kw)
	    return wrapper
	python decorator语法
	@log
	def now():pass
	等价于
	now = log(now)
	def log(text):
	    def decorator(func):
	        def wrapper(*args, **kw):
	            print('%s %s():' % (text, func.__name__))
	            return func(*args, **kw)
	        return wrapper
	    return decorator
	@log("excute")
	def now():pass
	等价于
	now = log("excute")(now)
	因为decorator是不会改变函数签名的
	所以完整的写法是借助functools把签名复制过去
	import functools

	def log(func):
	    @functools.wraps(func)
	    def wrapper(*args, **kw):
	        print('call %s():' % func.__name__)
	        return func(*args, **kw)
	    return wrapper
# 面向对象细节
	动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。
	初始化细节:
		类的初始化,不执行定义的方法但执行定义,如果类内有可执行代码则执行该代码
		这种代码称之为静态代码(所谓静态则是副本只有一个的意思)
		子类的构造方法必须调用其父类的构造方法来进行基本的初始化
		# 如果不调用的话,部分属性无法被初始化从而导致父类override出问题
		调用父类初始化的三种方法
		1.super().__init__()
		2.父类名.__init__()
		3.super(子类名).__init__()
		继承发生时候,先初始化父类的代码,在初始化子类的代码
		初始化的顺序为 父类的静态成员变量,静态代码块,子类的静态成员变量,静态代码块,
		父类的普通方法,子类的普通方法
	类:
		普通字段self.filed
		静态字段 filed
		普通方法def f(self) # self默认传入对象
		静态方法@staticmethod # 静态方法默认没有参数
		类方法@classmethod def f(cls) # cls默认传入类
	类的各个组成在内存中的形式:
		普通字段为对象所有
		其他为类所有
		对象拥有类指针
		所有方法在内存中仅有一份
	封装：
		__value # 隐藏属性
		1.给任意实例绑上任意属性
		2.给任意实例绑上任意方法
		from types import MethodType
		s.set_age = MethodType(set_age, s, Student) 
		# 给实例绑定一个方法 set_age为自己写的方法
		3.给类绑上方法
		Student.set_score = MethodType(set_score, None, Student)
		4.对上面绑定的进行限制,比如只允许添加name和age
		__slots__=("name","age") 继承中是子类和父类中slots的和
		5.对属性实现限制
			class Student(object):
			    @property
			    def score(self):
			        return self._score
			    @score.setter
			    def score(self, value):
			        if not isinstance(value, int):
			            raise ValueError('score must be an integer!')
			        if value < 0 or value > 100:
			            raise ValueError('score must between 0 ~ 100!')
			        self._score = value
			    # @score.deleter del 属性的时候会执行的方法

			# @property是内置的装饰器 对score设置出错就会Exception
			只读属性的时候设置其中一个就可以完成相应的操作了
		6.实现迭代
			实现迭代器的两个方法
			1.__iter__
			2.next()
			class Fib(object):
			    def __init__(self):
			        self.a, self.b = 0, 1 # 初始化两个计数器a，b

			    def __iter__(self):
			        return self # 实例本身就是迭代对象，故返回自己
			    def next(self):
			        self.a, self.b = self.b, self.a + self.b # 计算下一个值
			        if self.a > 100000: # 退出循环的条件
			            raise StopIteration() # 抛出 StopIteration异常结束迭代
			        return self.a # 返回下一个值
		7.实现index (__getitem__ 方法)
			class Fib(object):
			    def __getitem__(self, n):
			        a, b = 1, 1
			        for x in range(n):
			            a, b = b, a + b
			        return a
			if __name__=='__main__':
				fib=Fib()
				fib[5]
			如果要实现类似切片的语法要判断,如果要实现step和负数也要做处理
			class Fib(object):
			    def __getitem__(self, n):
			        if isinstance(n, int):
			            a, b = 1, 1
			            for x in range(n):
			                a, b = b, a + b
			            return a
			        if isinstance(n, slice):
			            start = n.start
			            stop = n.stop
			            a, b = 1, 1
			            L = []
			            for x in range(stop):
			                if x >= start:
			                    L.append(a)
			                a, b = b, a + b
			            return L
		8.type创建类
	# 继承
		继承,python主要是多继承
		也就是要解决钻石继承的问题
		所谓的钻石继承就是多次初始化同一个爷爷类
		3.   各语言的解决方法
			钻石继承中，父类被多次初始化是个非常难缠的问题，我们来看看其他各个语言是如何解决这个问题的：
			3.1. C++
			C++使用虚拟继承来解决钻石继承问题。
			Medium1和Medium2虚拟继承Base。当生成Leaf对象时，Medium1和Medium2并不会自动调用虚拟基类Base的构造函数，而需要由Leaf的构造函数显式调用Base的构造函数。
			3.2. Java
			Java禁止使用多继承。
			Java使用单继承+接口实现的方式来替代多继承，避免了钻石继承产生的各种问题。
			3.3. Ruby
			Ruby禁止使用多继承。
			Ruby和Java一样只支持单继承，但它对多继承的替代方式和Java不同。Ruby使用Mixin的方式来替代，在当前类中mixin入其他模块，来做到代码的组装效果。
			3.4. Python
			Python和C++一样，支持多继承的语法。但Python的解决思路和C++完全不一样，Python是的用就是super
		理解super:
			mro:method resolution order # 继承解析请求
			>>> str.mro() # 可以获得一个类的继承链
			[<class 'str'>, <class 'object'>]
			通过mro，python巧妙地将多继承的图结构，转变为list的顺序结构。super在继承体系中向上的查找过程，变成了在mro中向右的线性查找过程，任何类都只会被处理一次。

