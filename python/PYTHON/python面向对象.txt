python中也是以类和对象建立面向对象的
1.类的定义
class Person(object):    //这句话表示定义一个person类继承自object
    pass      		 //类的代码
2.创建类的实例对象
    xiaoming=Person() //直接调用该代码段
                      ////Person xiaoming=new Person();
3.面向对象中相等的比较方法
== :表示是否指向同一对象 //对象池的方法
//java中 .equals()该方法判断的是内容是否一样
isinstance(xiaoming,Person)

4.初始化类的实例属性
//创建一个初始化方法
class Person(object):
    def __init__(self,argslist*):
        self.argsItem= argsItem.....
5.限制访问属性
  Person.__attr //两个下划线可以限制访问
6.类的属性 //这个属性不是实例特有的而是每个实例都有的
Person.adress	   //可以用类似于静态方法的调用形式去调用该属性
7.实例属性和类的属性
//实例属性相当于在创建时候传入的参数
//类的属性相当于类在定义时候有的属性
//当类的属性和实例属性重名时，实例属性的优先级高
8.__该代码段作为前缀的时候 不能通过外部访问，但是内部可以调用其方法或者字段
9.实例的方法就是在类中定义的函数,他的第一个参数永远是self //instance.method() Person.staticMethod()
//但是在调用的时候不用显式传入self
//私有字段创建set和get方法
10.python 把定义的函数当成属性去处理 一样可以用这种方法完成调用
类方法和实例方法
类方法static:@classmethod注解
实例方法:在class里面定义的方法,第一个参数是self都是非静态方法
11.继承
//总是要从某个类继承，如果没有合适的类就从Object继承
//手动初始化父类 super().__init__()
//super(Student, self).__init__(name, gender) 这么调用Student才有name属性
//super(this.class,self).__init__(*attrlist) //这么调用固定写法
12.isinstance(instance,object)  // 符合多肽性质
13.python中的多肽:在编译阶段无法确定其类型，运行时决定这就是多肽
14.java的多肽是父类变量指向子类并且调用不同的方法结果不同而产生多种形态
15.java和python中的不同，一个是调用方法的多种样态，另一个是参数不同调用不同只要求其有一个名字与之相同的方法
//说白了一个支持重载和重写，
//另一个不支持只是根据参数的不同去不同的父类中找
//这是动态语言和静态语言（例如Java）最大的差别之一。动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用。
16.读文件的方法以及多肽
import json
json.load(s)//这个是json类的方法 把一个对象读成json格式字符串
//load方法把s当成一个文件，只要s里面有read方法就可以读出来
17.python允许多继承
18.类的特殊方法
.__str__() //.toString()
.__repr__() //也相当于toString 只是这个打印给开发人员
//print instance 这个相当于调用.str方法
.__cmp__() //默认比较的方法 //当调用sorted()方法比较的时候默认调用这个方法如果类中没有这个方法就没法比较就会报错，和cmp函数的远离差不多
//sorted(list,func) 
.__len__() //实现len()方法的一个重要的方法
//对于面向对象非常深入的东西在另一个文件有说明白
还有一些特殊的方法比如__int__() __add__() 在使用到对应类的时候会用的分别完成不同的方法

__slots__=('name', 'gender') //这个东西是用来限制添加属性的
//就是说这个属性列表只允许添加这些属性
//从某舟角度上来说可以限制内存的使用
//init方法调用的时候一定要把本类的参数写全
//而slots并不用写全
//调用父类的时候要用本类super(className,self)这种方式去掉用
__call__()//把类变成一个可调用的对象

19./浮点数除法 和 //整数除法
from __future__ import division 赶紧引入3.0以上的版本

20.有理数Rational
class Rational(object):
    def __init__(self, p, q):
        self.p = p
        self.q = q

    def __add__(self, r):
        return Rational(self.p * r.q + self.q * r.p, self.q * r.q)

    def __sub__(self, r):
        return Rational(self.p * r.q - self.q * r.p, self.q * r.q)

    def __mul__(self, r):
        return Rational(self.p * r.p , self.q * r.q)

    def __div__(self, r):
        return Rational(self.p * r.q , self.q * r.p)

    def __str__(self):
        return  r'%s/%s'        %(self.p,self.q)

    __repr__ = __str__

r1 = Rational(1, 2)
r2 = Rational(1, 4)
print r1 + r2
print r1 - r2
print r1 * r2
print r1 / r2
//这个类的作用可以简化或者说精确有理数的计算

21.数据校验
@property //修饰get方法
@attrName.setter //修饰set方法
//在实际使用 .attrName= 这种方式赋值的时候也是调用set方法

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
复习一遍重要函数和重要机制
range(start,end,step) //生成具有一定规律的list 
zip(L1,L2,L3....)//可变长度 交错拼接
cmp(x,y)//简单比较x，y返回0，1，-1
int('1234',base='8')//转换为8进制的数据
str()
lambda argslist ：functionBody //匿名函数 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
重要的高阶函数
map(func,list)    //生成一个新的列表 以list元素作为func的接口参数
reduce(func,list) //减少 也是迭代运算 用列表生成式可以代替
filter(func,list) //过滤器 func是一个判断器返回True或False false的过滤掉
sorted(list,func) //排序函数遵循cmp函数返回值的
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
装饰起decorate
三层封装构成注解方法
def Method(prefix)
    def getMethod(functionInstance)
        def decorateMethod(*args,**keywords)
分别得到注解的前缀，注解的方法对象 方法的参数列表	
@Method('prefix') 标注在方法上面
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
列表生成表达式
[ itemFunctionOperationBody for item in list if item ] //只要写函数体就行
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
for k,v in kw.iteritems():
   //调用kw**关键字中的值         
    setattr(self,k,v)        //给对象设值

for arg in args		    //调用args*中关键字的值
    arg
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
数据结构
list[] append pop insert  [index]
tuple() 元组              [index]
dict{ } get          ['keyindex']
set([]) add remove
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
python中有override方法，没有overload
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
新函数
type(instance) //获取变量的类型
dir()  //获取变量的所有属性 ，基于cmd命令去获取这些属性
getattr(instance,'attributeName',returnBody)
//如果属性值不存在就返回returnBody的内容
setattr(instance,'attributeName','attributeValue')
