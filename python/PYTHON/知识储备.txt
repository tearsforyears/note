python字符串格式化符号:
    符   号	描述
      %c	 格式化字符及其ASCII码
      %s	 格式化字符串
      %d	 格式化整数
      %u	 格式化无符号整型
      %o	 格式化无符号八进制数
      %x	 格式化无符号十六进制数
      %X	 格式化无符号十六进制数（大写）
      %f	 格式化浮点数字，可指定小数点后的精度
      %e	 用科学计数法格式化浮点数
      %E	 作用同%e，用科学计数法格式化浮点数
      %g	 %f和%e的简写
      %G	 %f 和 %E 的简写
      %p	 用十六进制数格式化变量的地址


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
关于汉诺塔的理解

目标就是把上面的一堆盘子移开，考虑从最后一个开始

就是说 假如有三根柱子 A B C

A上初始化一堆盘子
(证明这是最短问上帝去)
A想到C假设要移动最后一个盘子


最后一部
第N部 从A->C 如果这是最后一部 那么剩下的盘子应该在B柱子上

把B柱子跟A柱子互换就变成了B借助A柱子移动到C柱子，无视C的大盘子
假设B上有N个盘子，(A也可以，因为AB柱子相当于不断在换嘛)
那么倒数第二部就是把B柱子最地下的盘子弄到C

从头来分析 假设方法 move(n,a,b,c) //n表示几个盘子 a，b，c表示柱子 move表示移动，a借助b柱子到达c

那么最后一部 a-->c

1.从头分析的话就是move(n-1,a,c,b) //先把所有上面盘子移动到b柱子
2.a->c 也就是move(1,a,null,c) 
//不借助b 干脆就认为移动一个就不借助(不调用b参数)
3.然后哦现在b柱子上全是盘子 那么 move(n-2,b,a,c)//b柱子移动到c
因为a参数在整个过程中没经过调用 所以我们可以表示出来这是递归，a，b的值在换
所以 特殊情况就是最后一部 一个盘子的情况

所以有
注意一个问题除非move(1)之外，其他方法都只能实现把上n-1个盘子移走 
if n==1 :
    print a,"-->",c
else:
    move(n-1,a,c,b)//把a移动到b
    print a,"-->",b
    move(n-1,b,a,c)//把b移动到c，这个原因是为了让他回到最初状态
    print b,"-->",c		