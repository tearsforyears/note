skiplist
存储结构
level 3 top->-1->21->37->1
				|
level 2	-1->21->37->71->1
		|
level 1	-1->7->14->21->32->37->71->85->177->1

跳表具有如下性质： 
(1) 由很多层结构组成 
(2) 每一层都是一个有序的链表 
(3) 最底层(Level 1)的链表包含所有元素 
(4) 如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出现。 
(5) 每个节点包含两个指针，一个指向同一链表中的下一个元素，一个指向下面一层的元素。

例子：查找元素 117 
(1) 比较 21， 比 21 大，往后面找 
(2) 比较 37, 比 37大，比链表最大值小，从 37 的下面一层开始找 
(3) 比较 71, 比 71 大，比链表最大值小，从 71 的下面一层开始找 
(4) 比较 85， 比 85 大，从后面找 
(5) 比较 117， 等于 117， 找到了节点。

skiplist的insert
确定K 表示要占据的层数
如果K大于现在列表的层数则要新添加层数
	# k用以下算法确定
	int random_level(){  
	    K = 1;  
	    while (random(0,1))  
	        K++;  
	    return K;  
	} 
skiplist的delete
和传统列表删除一致多个层级删除
跳表所有操作的复杂度都是logn


