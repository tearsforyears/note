tensorflow api
tf.Session() # 创建会话
sess.run() # 进行计算返回运行结果
tf.global_variables_initializer() # 初始化所有变量

#基本操作
	计算api
	tf.matmul(w1,x)#矩阵乘法
	tf.constant(1)
	tf.Variable(init_value,name=)# 变量尽量写名字
	tf.all_variables() # 得到一个变量列表可迭代
	tf.placeholder(dtype,shape,name)#等run时用feed_dict={}去填充值
	tf.placeholder(tf.float32,[4,None])# None可以填充任意长度 用于训练集数目m
	tf.get_variable(name,shape,initializer=tf.random_normal_initializer())
	# initializer 不应该传入一个实数 应该传入一个初始化生成器




#杂项tf.fft() tf.reduce_mean() tf.log() ......
	tf.clip_by_value(data,min,max)
	tf.nn.sigmoid()
	tf.nn.relu()
#感知机相关
	train=tf.train.AdamOptimizer(learning_rate).minimize(cost_function)
	tf.nn.softmax() #softmax激活单元 其实可以手写映射到exp(p(xi)),求和对应占比就为softmax
	learn_rate_decayed
		decayed_learning_rate = learing_rate * decay_rate^(global_step / decay_steps)
		lr = tf.train.exponential_decay(0.01,\
		global_step=global_step, decay_steps=10000, decay_rate=0.95, staircase=False)
# cnn
	
# 持久化模型
	ckpt模型
	saver = tf.train.Saver(max_to_keep=1)#保留最后一代的模型
	saver.save(sess,'ckpt/mnist.ckpt',\
	global_step=step,\
	keep_checkpoint_every_n_hours=2) 
	#step表示训练次数 第二个参数是路径 第三是没多少小时保存一次

	pb模型(用作迁移学习用,一个模型,相当好用)
	from tensorflow.python.framework import graph_util
	constant_graph = graph_util.convert_variables_to_constants(sess, sess.graph_def, ['names'])
  	with tf.gfile.FastGFile(pb_file_path, mode='wb') as f:
    	f.write(constant_graph.SerializeToString())
# 恢复模型 (涉及计算图的一些操作)
	ckpt模型
	tf.get_default_graph().get_tensor_by_name() # 获得加载好的图中的变量
	saver = tf.train.import_meta_graph(r'ckpt/softmax.ckpt-10000.meta')
	saver.restore(sess, tf.train.latest_checkpoint('ckpt/'))
	#加载完了图和计算的变量

	pb模型
	with gfile.FastGFile(pb_file_path, 'rb') as f:
	    graph_def = tf.GraphDef()
	    graph_def.ParseFromString(f.read())# graph_def 是一个类json结构 保存图的信息
	    sess.graph.as_default()
	    tf.import_graph_def(graph_def, name='')
	with tf.Session() as sess:
	    input = sess.graph.get_tensor_by_name("input:0")
        output = sess.graph.get_tensor_by_name("output:0")
        sess.run(output, feed_dict={input:x}) # 为输入的数据 这样可以做迁移学习

