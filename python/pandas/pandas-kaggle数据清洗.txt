pandas-kaggle数据清洗
此文档建立目的在用pandas对kaggle竞赛的数据进行清洗
对于一些api的应用,愿kaggle竞赛能收获奇迹

1.分析titanic数据集
	train.csv
	PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked
	1,0,3,"Braund, Mr. Owen Harris",male,22,1,0,A/5 21171,7.25,,S
	...
	PassengerId,Survived,Pclass(游客票的等级),Name,Sex,Age,
	SibSp(兄弟登船数目),Parch,Ticket,Fare(票价),Cabin(仓位),Embarked(港口)

	1.读取数据,预读一行和numpy矩阵加载
	df = pd.read_csv('../dataset/train.csv')

	# pre view for a sample
    pd.set_option('display.max_columns', None)
    pd.set_option('max_colwidth', 5)
    print(df.head(1))

    # load
    dataset = df.values # dataset is an ndnumpy array
2.空值处理
	df.isnull().any() #.any()的效果是 存在 True就返回True
	PassengerId    False
	Survived       False
	Pclass         False
	Name           False
	Sex            False
	Age             True
	SibSp          False
	Parch          False
	Ticket         False
	Fare           False
	Cabin           True
	Embarked        True
	dtype: bool 
	# True 的三行表示有空值(nan)
	
	df[df.isnull().values==True]
	#查看哪些值为空
	#因为索引的时候不是用dataframe而是用ndarray去索引的
	
	原始训练数据大小 (891, 12)->[866 rows x 12 columns]
	有空值的行数是挺多的

	结合实际情况 df.isnull().any()

	PassengerId,Survived,Pclass(游客票的等级),Name,Sex,Age*,
	SibSp(兄弟登船数目),Parch(父母登船数目),Ticket,Fare(票价),
	Cabin(仓位)*,Embarked(港口)*
	我们可以初步判断一些数据的处理

	根据上面方法继续对数据进行细微的索引
	print(df[df["Age"].isnull().values]) [177 rows x 12 columns]
    print(df[df["Cabin"].isnull().values].shape) (687, 12)
    print(df[df["Embarked"].isnull().values].shape) (2, 12)

	对空值的处理无非就三种:删除,填充,替换
	df.fillna(0,inplace=True) # 全部填充为0 inplace 替换原来数据
	df.dropna() # 把带有nan的行全部去掉 贼恶心
	df["Age"].fillna(df.mean()["Age"],inplace=True)# 填充某列值为平均数

	去掉重复的值
	df.duplicated().any()#校验是否有重复的值
	df.drop_duplicates(subset=None, keep='first', inplace=False)
	# subset 可填写列的值 keep选择保留重复数据第几个 可选last

	对字符串进行编码
	df.replace("male",0,inplace=True)
	进行决策:
	不需要进行去重操作,
	对null数据处理:
	丢弃Cabin的所有数据,
	非null的处理:
	舍弃PassengerId,Name,Ticket
	对Sex 进行编码
3.tensorflow one-hot encoding:
	实现思想:用单位矩阵的引用去生成
	>>> import numpy as np
	>>> I=np.eye(result_size)
	>>> I[np.array([1,2,3,2,1])] # 引用 [1,2,3,2,1] 行
	显然可以预知one-hot encoding 只要在来个转置就可以了
