快速上手pandas
pandas主要是用于读取文件或者生成文件的时候会很快

pandas中有三种基本结构
Series DataFrame Panel 对应1D 2D 3D

import numpy as np
import pandas as pd

s = pd.Series([1,3,5,np.nan,6,8]) //初始化series
df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))
#index表示列标 columns表示行标
df=pd.DataFrame(np.random.rand(6,5),index=range(10,16),columns=range(10,15))
随便指定啥都行 只要是序列结构
          10        11        12        13        14
10  0.310029  0.415288  0.490930  0.827198  0.437881
11  0.922306  0.935820  0.865483  0.040425  0.081441
12  0.056989  0.442449  0.840737  0.876888  0.065970
13  0.257567  0.512623  0.077693  0.781250  0.336222
14  0.033904  0.770816  0.507880  0.087273  0.454292
15  0.815534  0.924637  0.538681  0.381460  0.671145
结果大概长这样子
不过df最大的用处应该是存字典了吧
完全可以穿[{},{}]这种形式的多重dict 同样可以创建 index和columns可以不用指定甚至

df.head()//最开始5(默认)行
df.tail(3)//最后三行
查看基本属性
df.index
df.columns
df.values
基本api
df.describe()//count mean std min max 数据基本统计
df.T
#增加行值
df.append(s,index="")
#排序
sort_index()#index不变 根据字典的key进行排序
sort_values(by="key")#根据某个key对index进行排序
pandas支持切片 支持字典索引 label索引(loc,iloc(位置),ix,at(标量快))
boolean索引 df[df>0] #留下大于0的数据 数组广播和boolean数组生成机制
df.dropna(how='any')#丢弃所有丢失的数据
pd.concat([])#连接参数是一个list
#csv文件读写
df.to_csv('foo.csv')
df=pd.read_csv('foo.csv')
to_hdf read_hdf
to_excel read_excel

####series,dataframe也可以从字典里构造 满足ndarray操作 满足字典操作 满足向量化操作

//老本
转置
df.T

排序
df.sort_index(axis=0,ascending=False) //ascending表示占领
df.sort_values(by="B") //按照B列排序

索引 loc at iloc
支持python的索引，切片
但是推荐使用label索引
df.loc[dates[0]] //带上索引的列号
默认是横行
df.loc[:,['A','B']]//对多列数据索引
第一个表示行第二个表示列
df.loc[1:3,['A','B']]//对多行多列进行索引
可以进行数据降维

对于获得标量的时候可以用at代替loc速度更快

位置索引
df.iloc[3]//默认使用第几行进行索引
df.iloc[3:5,3:5]//行列索引
df.iat[1,1] //这个可以用来索引标量

布尔索引
df[df.A>10] //所有a列大于10
df2['E'] = ['one', 'one','two','three','four','three']
df2[df2['E'].isin(['two','four'])]
//类似于mask索引

可以直接修改数据的值

//[1,23,40]+[1]=[1,23,40,1] amazing！

数据缺失
df1.fillna(value=5) //对于丢失数据填充新的值
pd.isnull(df1)//检查数据丢失位置

统计计算
df.mean()//每一列的均值
df.mean(1)//每一行的均值

apply操作
相当于接受函数对象
对每一列的值进行操作
df.apply(lambda x:x.max()-x.min())

s=pd.Series([....])//可以传入字符串对象
s.str.lower()

pandas对象的连接
pieces = [df[:2], df[4:5], df[7:]]
pd.concat(pieces) //连接pandas对象


数据库的join连接表在pandas的实现
select t1.lval t2.rval from table1 as t1
left join table2 as t2
on t1.key=t2.key

left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})
right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})
pd.merge(left, right, on='key')

df.append(s, ignore_index=True) //
df.groupby('A') //按照A那一列分类

改变形状
df.stack() //把columns变成一个新的index部分
df.unstack() //把最后一级index放回column
df.unstack(1) //指定其他列
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
series    1D
支持向量化操作
支持numpy函数
支持切片和字典构造

DataFrame  2D
DateFrame(data,index,columns)
data
可以从ndarray list dict中构造








