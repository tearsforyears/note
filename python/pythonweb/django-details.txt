# ORM MVC综述
# 开发流程
	models开发:确定表的结构字段,进行迁移
	views开发:控制器的逻辑编写,返回template或者html文本(cgi),配置url
	template:类python语法的html开发,配置template (加载和渲染)
	CMS后台使用:创建超级管理员登陆就可以对数据进行操作
# 特性
	默认的关系型数据库使用sqlite3 相对简单
	如果选择其他数据库则需要在settings.py中添加其他一些设置
	USER PASSWORD HOST等
	数据库迁移三个命令
	makemigrations app # 检测数据迁移
	migrate app # 数据迁移
	sqlmigrate app migration # 生成sql语句
# django demo
	# template/views语法
		# url() 和 path_re()可以匹配正则相关路由 path只匹配字符串路由
		# 基础语法
			{%for i in range(3)%} # 原生类python代码
			{% endfor %}
			{% if %}
			{% else %}
			{% endif %}
			{% url 'detail'%} # 在python里面给url命名name='detail'
			{{object}} # 获取值首先对其进行字典查找,失败了进行列表查找 .get() .index()
		# error_message 全局变量保存错误信息
		# forloop.counter for计数器
		# 命名空间和占位符
			app_name = 'polls'
			urlpatterns = [
			    path('<int:question_id>/', views.detail, name='detail'),
			] # <int:question_id> 这种占位符可以在定义path路由的时候进行定义
			{% url 'polls:detail' question.id %} # 引用命名空间对值进行调用
		# 获取表单数据
			request.POST['field_name']
		# 增删改都需要与服务器进行通信才能完成
			所以使用的是表单的技术进行http通信
			POST含义是具有修改数据所以可以不要用GET方法

		# 通用views
			# 官方文档例子
			urls.py
			app_name = 'polls'
			urlpatterns = [
			    path('', views.IndexView.as_view(), name='index'),
			    path('<int:pk>/', views.DetailView.as_view(), name='detail'),
			    path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),
			    path('<int:question_id>/vote/', views.vote, name='vote'),
			]
			views.py
			from django.views import generic
			class IndexView(generic.ListView): # 通用列表视图
			    template_name = 'polls/index.html'
			    context_object_name = 'latest_question_list'
			    def get_queryset(self):# 实现get_queryset方法
			        return Question.objects.order_by('-pub_date')[:5] 
			
			class DetailView(generic.DetailView): # 通用细节视图
			    model = Question
			    template_name = 'polls/detail.html'
			# 通用视图和.as_view()方法
				前端请求->url()定位到view类或方法上->参数处理,dispatch()->自己处理方法
				class ClassName(View):
				    # 继承View自动判断请求方法
				    def post(self,request): # 用作登陆请求的时候这种复用很吃香
				        return render(request, 'login.html', {})
				    def get(self,request):
				        return render(request, 'login.html', {})
				    def other(self,request):
				        pass
				#调用方法
				url(url, ClassName.as_view(), name)
				# as_view()方法则是把一个普通的类变成可处理的响应动作
				# 通用视图则是实现了一部分的方法get等 只要指定部分参数就可以使用的模版
				模版在django.views.generic中
	# 自动化测试
		python manage.py test app_name
		test.py
		from django.test import TestCase
		class QuestionModelTests(TestCase): # 继承TestCase
		    def test_was_published_recently_with_future_question(self):
		        time = timezone.now() + datetime.timedelta(days=30)
		        future_question = Question(pub_date=time)
		        self.assertIs(future_question.was_published_recently(), False) # 断言
		# 测试过程
			python manage.py test polls 将会寻找 polls 应用里的测试代码
			它找到了 django.test.TestCase 的一个子类
			它创建一个特殊的数据库供测试使用
			它在类中寻找测试方法——以 test 开头的方法。		
	# ORM相关语法
		# 操作数据
			from .models import tablename
			tablename.objects.all() # 查询所有对象 返回对象列表
			tablename.filter(id=1)
			tablename.get(id=1)
			tablename.field_set.all() # 查询field字段的所有值 _set是默认参数
			tablename.field_set.create() # 往set中添加值
			tablename.objects.order_by()
	# 加载静态资源
		新建一个static目录(类似于templates)
		template:
			{% load static %}
		    <link rel="stylesheet" type="text/css" href="{% static 'test_app/1.css' %}" />	
	    settings.py:
		    STATIC_URL = '/static/'
			STATICFILES_DIRS = (
			    os.path.join(BASE_DIR, 'static'),
			)
	# 后台开发
		# 简单使用
			python manage.py createsuperuser
			http://127.0.0.1:8080/admin/ 可以进入管理页面
			在admin.py里面注册
			from django.contrib import admin
			from models import *
			admin.site.register()
		1.管理字段
			from django.contrib import admin
			from .models import Question
			class QuestionAdmin(admin.ModelAdmin):
			    fields = ['pub_date', 'question_text'] # 要修改的字段
			    list_display = ['pk','...'] # 这里可以写字段也可以写方法 显示字段 
			admin.site.register(Question, QuestionAdmin)
			# 更加细节的管理 
				from django.contrib import admin
				from .models import Question
				class QuestionAdmin(admin.ModelAdmin):
				    fieldsets = [
				    	(None,               {'fields': ['question_text']}),
		        		('Date information', {'fields': ['pub_date']}),
				    ] # 标题和字段内容
				admin.site.register(Question, QuestionAdmin)
		2.关联对象
			class ChoiceInline(admin.StackedInline):
			    model = Choice
			    extra = 3
			class QuestionAdmin(admin.ModelAdmin):
			    fieldsets = [
			        (None,               {'fields': ['question_text']}),
			        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
			    ]
			    inlines = [ChoiceInline] # 限制关联对象名字的类
			admin.site.register(Question, QuestionAdmin)
# django 进阶
	pass
# model layer
	# demo
		from django.db import models
		class ORM_Object(models.Model):
			field = models.CharField(max_length=30)
		# 等价于以下sql 表名为 项目名_类名
		create table appname_orm_object(
			"id" serial not null primary key,
			"field" varchar(30) not null,
		)
	1.django的内置数据类型字段(驼峰命名法去命名的)
		AutoField() # 自增字段 
		# id = models.AutoField(primary_key=True) 
		# django自动定义主键 只允许有一个自增字段
		BigAutoField() # 大整数自增
		BigIntegerField() # 大整数字段 对应textinput
		BinaryField()
		BooleanField()
		NullBooleanField() # 可选值多了个NULL
		CharField(max_length=) # 字符串
		CommaSeparatedIntegerField() # 1,000 逗号分隔的大整数 不常用
		DateField(auto_now=False, auto_now_add=False, **options)
		# auto_now=True 每次保存字段的时候记录时间
		# auto_now_add=True 创建时候的记录时间
		# default 可以设置时间
		DateTimeField() # datetime.datetime的实例用法和上一样
		DurationField() # 持续时间类型
		TimeField() # 时间类型 datetime.time 实例
		EmailField() # 邮箱,django内置验证正则
		FileField(upload_to=None, max_length=100, **options) # 上传文件类型 
		FilePathField()
		DecimalField() # 十进制小数
		FloatField()
		ImageField()
		IntegerField() # 常用字段
		PositiveIntegerField()
		PositiveSmallIntegerField()
		GenericIPAddressField(protocol='both', unpack_ipv4=False, **options)
		# ipv4或者ipv6地址
		SlugField() # 短字符
		SmallIntegerField()
		TextField() # textarea
		URLField() # url
		UUIDField() # 用于存uuid唯一标识分布式系统中的元素
	2.数据字段的应用场景
		1.文件上传
			# 表单
				<form action='/upload/' method='post' enctype='multipart/form-data'>
					<input type='file' name='file_name'>
					<input type='submit'>
				</form>
				def upload(request):
					if request.method == 'POST':
						obj = request.FILES.get('file_name') # 这是后端核心得到流
			# ajax
				<div>
				        <input type="file" name="file" id="file_upload">
				        <input type="button" value="上传" onclick="FileUpload()">
				</div>
				<script src="/static/js/jquery-3.2.1.min.js"></script>
				<script>
				    function FileUpload() {
				            var form_data = new FormData();
				            var file_info =$('#file_upload')[0].files[0];
				            form_data.append('file',file_info);
				            //if(file_info==undefined)暂且不许要判断是否有附件
				                //alert('你没有选择任何文件');
				                //return false
				            $.ajax({
				                url:'/upload_ajax/',
				                type:'POST',
				                data: form_data,
				                processData: false,// tell jquery not to process the data
				                contentType: false,// tell jquery not to set contentType
				                success: function(callback) {
				                    console.log('ok')
				                }
				            });
				            }
				</script>
			# FileField(upload_to=)
				FileField(upload_to='uploads/%Y/%m/%d/')
				文件被上传至 MEDIA_ROOT/uploads/年/月/日/ 上
				upload_to可以接受一个返回字符串的回调函数上
				def user_directory_path(instance, filename):
				    # 文件上传到MEDIA_ROOT/user_<id>/<filename>目录中
				    return 'user_{0}/{1}'.format(instance.user.id, filename)
				# MEDIA_ROOT 可在settings.py中设置
		2.图片上传
			ImageField(upload_to=None, height_field=None, width_field=None, max_length=100, **options)
			用法和FileField基本一致
		# 数据库中保存的都是指向文件的字符串
		# 无论你如何保存上传的文件，一定要注意他们的内容和格式，避免安全漏洞！
		# 务必对所有的上传文件进行安全检查，确保它们不出问题！
		# 如果你不加任何检查就盲目的让任何人上传文件到你的服务器文档根目录内，
		# 比如上传了一个CGI或者PHP脚本，很可能就会被访问的用户执行，这具有致命的危害。
		3.UUIDField
			数据库本身并不能生成UUID要指定default
			models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
	3.关系型字段
		1对多
			models.ForeignKey(to,on_delete=models.CASCADE)
			# 外键要定义在多对一的多的一方
			# to可以写类名也可以直接写类 也可以写全指定应用
			# 一个应用:comment系统
				class Comment(models.Model):
				    title = models.CharField(max_length=128)
				    text = models.TextField()
				    parent_comment = models.ForeignKey('self', on_delete=models.CASCADE)
				# 通过self的引用自身递归外键
			# on_delete 参数可选值
				CASCADE # 级联删除
				PROTECT # 保护 抛出ProtectedError
				SET_NULL # 当null=True 可以用该值
				SET_DEFAULT # 当字段default设置时可用
				DO_NOTHING
				SET() # 传递一个值或者回调函数
			# 其他一些可以设置的参数
				limit_choices_to # 限制外键所能关联的对象
				related_name # 用于关联对象反向引用模型的名称 如果不想设置可以用"+"代替
				# related_name的作用
					# 表结构
					class Person(models.Model);
					    name = models.CharField(verbose_name='作者姓名', max_length=10)
					    age = models.IntegerField(verbose_name='作者年龄')
					class Book(models.Model):
					    person = models.ForeignKey(Person, related_name='person_book')
					    title = models.CharField(verbose_name='书籍名称', max_length=10)
					    pubtime = models.DateField(verbose_name='出版时间')
					# 查询某个作者的所有书
					1.首先找到作者 person = Preson.objects.filter('作者条件')
					2.person.book_set.all() # 原生django会默认给子表加外键,用 表名_set来获得引用
					3.person.person_book.all() # 也可以related_name利用反向查询的名字
				related_query_name # 反向关联查询名
				to_field # 一般关联到主键上,关联到字段也行 需要 unique=True
		多对多
			# 一对多同样可以完成很多多对多的功能
			ManyToManyField()
			# 可设置参数
				related_name
				related_query_name
				limit_choices_to
				symmetrical # 对称关系 默认为True
				# 例子
					from django.db import models
					class Person(models.Model):
					    friends = models.ManyToManyField("self")
					# django不会设置person_set用于反向关联,可设置symmetrical为False用于反向

				through # 定义中间表 django会自动生成,但是想要添加额外数据through自己定义
				db_table # 中间表名字 默认为两个小表的名字+hash
			# 多对多例子
				from django.db import models
				class Person(models.Model):
				    name = models.CharField(max_length=50)
				class Group(models.Model):
				    name = models.CharField(max_length=128)
				    members = models.ManyToManyField(
				        Person,
				        through='Membership',       ## 自定义中间表
				        through_fields=('group', 'person'),
				        # 这两个字段可以不指定 前提是 Membership这张表里面只指定两个外键
				        # 下面指定了三个外键所以要把关联显式指定
				    )
				class Membership(models.Model):  # 这就是具体的中间表模型
				    group = models.ForeignKey(Group, on_delete=models.CASCADE)
				    person = models.ForeignKey(Person, on_delete=models.CASCADE)
				    # 额外属性
				    inviter = models.ForeignKey(
				        Person,
				        on_delete=models.CASCADE,
				        related_name="membership_invites",
				    )
				    invite_reason = models.CharField(max_length=64) 
		1对1
			# 主要是为了扩展某些功能而存在
			OneToOneField(to, on_delete, parent_link=False, **options)
			# 例子
				class MySpecialUser(models.Model):
				    user = models.OneToOneField(
				        settings.AUTH_USER_MODEL,
				        on_delete=models.CASCADE,
				    )
				    supervisor = models.OneToOneField(
				        settings.AUTH_USER_MODEL,
				        on_delete=models.CASCADE,
				        related_name='supervisor_of',
				    )
				>>> user = User.objects.get(pk=1)
				>>> hasattr(user, 'myspecialuser')
				True
				>>> hasattr(user, 'supervisor_of')
				True
				# 因为没有多所以就不是myspecialuser_set的关系 与此同时可以扩展一些字段
	4.字段的参数
		verbose_name # 人类可读的别名
		db_column # 定义列名 默认为字段名
		db_index # 若db_index为True 则为该字段创建索引
		db_tablespace # 用于字段索引的数据库表空间的名字,
		primary_key # 主键
		unique # 唯一
		unique_for_date
		unique_for_month
		unique_for_year

		default # 设置字段默认值 为可调用对象 不能为可变值和lambda表达式等
		# 匿名函数不能被migrations序列化
		editable # False时当前字段不会再admin后台或者ModelForm表单中显示 默认为True
		error_messages # 定义错误信息 接受dict类型
		# 字典的键可以是null,blank,invalid,invalid_choice,unique和unique_for_date其中的一个
		validators # 验证器列表

		null # True时django用NULL保存空值
		blank # True时字段可为''
		# 要小心一个null为False，blank为True的字段接收到一个空值可能会出bug或异常。
		choices # 相当于eumn类,穷举选项
		# choices例子
			class Person(models.Model):
			    SHIRT_SIZES = (
				    ('S', 'Small'),
				    ('M', 'Medium'),
				    ('L', 'Large'),
			    )
			    name = models.CharField(max_length=60)
			    shirt_size = models.CharField(max_length=1, choices=SHIRT_SIZES)
			.get_shirt_size_display() # 使用.get_字段名_display() 获取显示

		help_text # 显示在表单上的纯文本
	5.模型的元数据Meta