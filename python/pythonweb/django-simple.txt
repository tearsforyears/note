django
开发很快
# 简介
	功能完善、要素齐全：该有的、可以没有的都有，常用的、不常用的工具都用。Django提供了大量的特性和工具，无须你自己定义、组合、增删及修改。但是，在有些人眼里这被认为是‘臃肿’不够灵活，发挥不了程序员的主动能力。（一体机和DIY你更喜欢哪个？^-^）
	完善的文档：经过十多年的发展和完善，Django有广泛的实践经验和完善的在线文档（可惜大多数为英文）。开发者遇到问题时可以搜索在线文档寻求解决方案。
	强大的数据库访问组件：Django的Model层自带数据库ORM组件，使得开发者无须学习其他数据库访问技术（SQL、pymysql、SQLALchemy等）。当然你也可以不用Django自带的ORM，而是使用其它访问技术，比如SQLALchemy。
	灵活的URL映射：Django使用正则表达式管理URL映射，灵活性高。
	丰富的Template模板语言：类似jinjia模板语言，不但原生功能丰富，还可以自定义模板标签。
	自带免费的后台管理系统：只需要通过简单的几行配置和代码就可以实现一个完整的后台数据管理控制平台。
	完整的错误信息提示：在开发调试过程中如果出现运行错误或者异常，Django可以提供非常完整的错误信息帮助定位问题。
MVC框架和django的MVT框架
	MVC model view controller
	MVT model template view
	MVC框架无需多言,MVT框架和MVC框架对应模块职责等同
django命令
	创建项目
	django-admin start project project_name
	创建app
	python manage.py startapp app_name
	运行服务器
	python manage.py runserver 8080 # 指定端口
	迁移
	python manage.py makemigrations
	python manage.py migrate
项目完整目录结构
	F:.
	│  db.sqlite3
	│  manage.py
	│
	├─.idea
	│      misc.xml
	│      modules.xml
	│      web_test.iml
	│      workspace.xml
	│
	├─templates
	│  └─test_app
	│          index.html
	│
	├─test_app
	│  │  admin.py
	│  │  apps.py
	│  │  models.py # 数据模型
	│  │  tests.py # 项目测试
	│  │  urls.py # 自己建立的相关路由配置
	│  │  views.py # 视图层
	│  │  __init__.py
	│  │
	│  ├─migrations
	│  │  │  0001_initial.py
	│  │  │  __init__.py
	│  │  │
	│  │  └─__pycache__
	│  │          0001_initial.cpython-36.pyc
	│  │          __init__.cpython-36.pyc
	│  │
	│  └─__pycache__
	│          admin.cpython-36.pyc
	│          models.cpython-36.pyc
	│          urls.cpython-36.pyc
	│          views.cpython-36.pyc
	│          __init__.cpython-36.pyc
	│
	└─web_test
	    │  settings.py
	    │  urls.py
	    │  wsgi.py
	    │  __init__.py
	    │
	    └─__pycache__
	            settings.cpython-36.pyc
	            urls.cpython-36.pyc
	            wsgi.cpython-36.pyc
	            __init__.cpython-36.pyc

# django无需自己编写orm框架
	数据模型类models.py
	会自动生成对数据库的orm映射简化开发
	但同时会增加耦合性,模型类相当于底层的数据结构	
# 编写模型类和迁移(migration)
	models.py
		from django.db import models
		class BookInfo(models.Model):
			name=CharField()
			...
			def __str__():
				return str_instance.encode('utf-8')
		class HeroInfo(models.Model):
			book_info=ForeignKey(BookInfo)
	settings.py
		INSTALLED_APPS={
			'test_app' # 应用名字
		}
	生成迁移应用 python manage.py makemigrations
	根据迁移生成数据库 python manage.py migrate
	数据模型类添加方法不需要重新迁移,但需要重新加载脚本
# 数据查询
	# 利用数据模型进行插入
	from test_app import *
	b=BookInfo()
	b.title = "aaa"
	b.save()
	# 利用数据模型进行详细查询
	BookInfo.objects.all() # 查询所有
	b=BookInfo.objects.get(pk=1)
	b.title='123'
	b.save()
	b.delete() # 删除某一个对象
	django框架完成了数据库的封装 是现代框架的最基本特征之一
# 对模版进行数据填充
	views.py
	from django.shortcuts import render
	from django.http import *
	from .models import * # 导入数据
	def index(request):
		return render(request,'test_app/index.html',{'title':'test'})
		# render方法可以通过传入字典的形式去补充参数
		bookList = BookInfo.objects.all() # 查询所有书
		# return render(request,'test_app/index.html',{'list':list})
	index.html里面的调用则变成
	{{title}}去调用某个值
	内嵌python代码
	{%for book in list%}
	<li>book.title</li>
	{%endfor%}
	# django模版的语法类似jsp和php
# 使用django默认管理
	python manage.py createsuperuser
	http://127.0.0.1:8080/admin/ 可以进入管理页面
	在admin.py里面注册
	from django.contrib import admin
	from models import *
	# 关联类 可以没有
	# 关联的意思是添加该类(bookinfo)的时候,还得额外添加几个heroinfo
	class HeroInfoInline(admin.StackedInline): # admin.TabularInline
		model = HeroInfo
		extra = 3 # 至少要关联的对象,一对多的时候
	# 管理类 可以没有这个类,选择默认
	class BookInfoAdmin(admin.Models): 
		# 管理页
		list_display=['pk'] # 显示字段列表
		list_filter=[] # 过滤字段 根据某个字段分组
		search_fields=[] # 根据某个字段搜索
		list_per_page = 2 # 每条的数据数
		# 添加和修改页
		fieldsets=[
			('base',{'fields':['title']}),
			('super',{'fields':['pub_date']),
		]
		# inlines = [HeroInfoInline] # 指定要关联的类
	admin.site.register(BookInfo,BookInfoAdmin)# admin.site.register(BookInfo)
# 开发视图
	# 在view.py里面定义视图
	# from django.shortcuts import render
	from django.http import * #request,response
	def index(request):
		return HttpResponse('hello world')
	# route的配置在 urls.py
		# 为了防止把所有的url都写到root节点上
		# 一般在每个app上都有一个urls.py 然后用include引进来
		from django.contrib import admin
		from django.urls import path,include
		# from django.conf.urls import url,include 旧版django上的引用
		urlpatterns = [
    		path(r'admin/', admin.site.urls),
    		url(r'^',include('test_app.urls'))
		]
		# 在 test_app.urls.py里面
		from django.urls import path
		from . import views
		urlpatterns = [
			path(r'^$',views.index) # 哪个视图去处理
		]
# 使用模版		
	在settings.py文件里面配置TEMPLATES的'DIRS'
	'DIRS':[os.path.join(BASE_DIR,'templates')]
	templates为模版指定文件夹
	views.py里面使用模版
	from django.template import RequestContext, loader

	def index(request):
		temp = loader.get_template('test_app/index.html')
		return HttpResponse(temp.render())  # render 渲染
	或者另一种方式使用
	from django.shortcuts import render
	def index(request):
		return render(request, 'test_app/index.html')
# 总结:
	流程
	请求 -> views -> models -> views -data-> template(类python语法) -> views ->response
	models开发:确定表的结构字段,进行迁移
	views开发:控制器的逻辑编写,返回template或者html文本(cgi),配置url
	template:类python语法的html开发,配置template (加载和渲染)
	CMS后台使用:创建超级管理员登陆就可以对数据进行操作
# 练习:
	设计最简单的一对多的表
	完成增删改查的后台操作