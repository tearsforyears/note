flask开发艺术
1.基础
	# 入门级demo
		# coding=utf8
		from flask import Flask

		app = Flask(__name__)


		@app.route('/') # 这装饰器的强大功能让路径的配置也可动态
		def hello_world():
		    return 'Hello World!'


		if __name__ == '__main__':
		    app.run()
		    # app.run(host='0.0.0.0') 可以监听所有公网ip
		    # app.run(debug=Ture) # 调试模式
	# app.route("path")
		支持以下两种动态写法
		@app.route('/user/<username>')
		def show_user_profile(username):
		    return 'User %s' % username

		@app.route('/post/<int:post_id>')
		def show_post(post_id):
		    return 'Post %d' % post_id
		还可以限制请求方法
		@app.route('path',methods=['GET', 'POST'])
	# 获取函数的url
		url_for('index') # 参数是函数名
		# 给静态文件生成url 一般这个文件在 root/static/style.css下
		url_for('static', filename='style.css')
	# 渲染模版
		模版路径 root/templates/file_name
		模版采用 Jinja2 
		from flask import render_template

		@app.route('/hello/')
		@app.route('/hello/<name>')
		def hello(name=None):
		    return render_template('hello.html', name=name)
	# 单元测试
		from flask import request

		with app.test_request_context('/hello', method='POST'):
		    assert request.path == '/hello'
		    assert request.method == 'POST'
	# 全局请求对象
		searchword = request.args.get('q', '') # 第二个参数为默认参数
		request.form['username'] # 拿到表单参数
	# 文件上传
		<form enctype="multipart/form-data" method="POST" action="/upload">
			<input type="file" name="file"/>
			<input type="submit" name="submit"/>
		</form>
		js代码实现
			var files;
			$(document).ready(function(){
			  $("input").change(function(){
			    file = this.file;
			  });
			});
			$("#upload-btn").click(function(){
			  var fd = new FormData();
			  fd.append("file", file);
			  $.ajax({
			    url: "/upload/",
			    method: "POST",
			    data: fd,
			    contentType: false,
			    processData: false,
			    cache: false,
			    success: function(data){
			      console.log(data);
			    }
			  });
			});
		from flask import request
		from werkzeug import secure_filename

		@app.route('/upload', methods=['GET', 'POST'])
		def upload_file():
		    if request.method == 'POST':
		        f = request.files['file']
		        f.save('/file/uploads/' + secure_filename(f.filename))
	# cookies
		username = request.cookies.get('username')

		from flask import make_response
		resp = make_response(render_template(...)) 
		# 该函数也可返回普通方法 make_response(index())
    	resp.set_cookie('username', 'the username')
    	resp.headers["name"] = value # 同理可以设置其他属性
 	# 重定向和错误
	 	from flask import abort, redirect, url_for
		
		@app.route('/')
		def index():
		    return redirect(url_for('login')) # 重定向
		@app.route('/login')
		def login():
		    abort(404) # 返回错误
		    return None

		# 专门处理错误
		@app.errorhandler(404)
		def page_not_found(error):
		    return render_template('page_not_found.html'), 404
	# Session
		from flask import Flask, session, redirect, url_for, escape, request

		app = Flask(__name__)

		@app.route('/')
		def index():
		    if 'username' in session:
		        return 'Logged in as %s' % escape(session['username']) 
		        # escape是把普通字符转化成html字符
		    return 'You are not logged in'

		@app.route('/login', methods=['GET', 'POST'])
		def login():
		    if request.method == 'POST':
		        session['username'] = request.form['username']
		        return redirect(url_for('index'))
		    return '''
		        <form action="" method="post">
		            <p><input type=text name=username>
		            <p><input type=submit value=Login>
		        </form>
		    '''

		@app.route('/logout')
		def logout():
		    # remove the username from the session if it's there
		    session.pop('username', None)
		    return redirect(url_for('index'))

		# set the secret key.  keep this really secret:
		app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'
2.稍微进阶
	- request
		request.args.to_dict()
		request.form
		request.files["file"]
	- response
        - return render_tempalte()    
        - return redirect()
        - return ""
        v = make_response(返回值)  #可以把返回的值包在了这个函数里面，然后再通过.set_cookie绑定cookie等
    - session
        - 存在浏览器上，并且是加密的
        - 依赖于：secret_key
    blueprint
    	项目结构
	    	- package_name
		    	- app1
		    		- code.py
		    	- app2
		    	- __init__.py
		    - manage.py
	    各个文件写法
	    	manage.py
		    	import package_name
		    	if __name__=="__main__":
		    		package_name.app.run() # 就是init文件中定义的app
	    	
	    	__init__.py
		    	from flask import Flask
		    	from package_name.app1 import code
		    	app = Flask(__name__)
		    	print(app.root_path)
		    	app.register_blueprint(code.code) # 引用下面文件定义的蓝图对象 注册下 

		    code.py
			    from flask import  Blueprint,render_template
				code = Blueprint("code",__name__) 

				@code.route('/')
				def f():
					pass
				...
	中间件开发
		@app.before_request
		def process_request1():
		    print('process_request1')

		@app.after_request
		def process_response1(response):
		    print('process_response1')
		    return response

		# 可开发多个中间件 按照定义顺序一一调用
3.轻量级数据库sqlite3 api
4.数据库的第三方插件
	orm框架

5.服务器部署
	Tomcat
	Apache rewrite,动态页面,模块
	Nginx 做负载均衡 可以处理静态资源 做反向代理(*),高并发
	正向代理指的是我们无法直接访问外网,需要通过服务器代替我们进行请求
	反向代理值指的是服务器把外网请求转发到内网,由内网服务器返回结果

