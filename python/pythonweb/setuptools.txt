# setuptools
	setuptools 是一个管理python包的工具
	python包的定义 __init__.py
	wheel egg等都属于打包的方式(python是蟒蛇egg自然就是打包方式了hh)
	# demo
		spawn-egg包目录结构
			./spawn-egg
			./spawn-egg/Base.pyc
			./spawn-egg/hello.py
			./spawn-egg/Base.py
			./spawn-egg/__init__.py
		setup.py
			from setuptools import setup, find_packages
			setup(
				 name = "spawn-egg", # 包名
				 version="0.1.0", # 版本号
				 packages = find_packages(), # 包含的包
				 description = "test how to make eggs",
				 author = "Litrin J.",
				 author_email = "XXX@gmail.com",

				 license = "GPL",
				 keywords = ("test", "python"), # 发布到pip上的关键字
				 platforms = "Independant",
				 url = "",
			)
		python setup.py bdist_egg # 生成egg
		生成完之后 会有 spawn_egg-0.1.0-py2.7.egg名字的一个zip包
	# 包的安装
		python setup.py install # 安装包
		这种形式的安装包是把包加入全局目录中
	# 应用场景
		在编写相关系统时，python 如何实现连同依赖包一起打包发布？
			假如我在本机开发一个程序，需要用到python的redis、mysql模块以及自己编写的redis_run.py模块。我怎么实现在服务器上去发布该系统，如何实现依赖模块和自己编写的模块redis_run.py一起打包，实现一键安装呢？同时将自己编写的redis_run.py模块以exe文件格式安装到python的全局执行路径C:\Python27\Scripts下呢？
			setuptools就是为了这种情况而产生的 不用持续pip去安装一堆依赖库
	# 实际例子
		#!/usr/bin/env python
		# coding=utf-8
		from setuptools import setup
		'''
		把redis服务打包成C:\Python27\Scripts下的exe文件
		'''
		setup(
		    name="RedisRun",  #pypi中的名称，pip或者easy_install安装时使用的名称，或生成egg文件的名称
		    version="1.0",
		    author="Andreas Schroeder",
		    author_email="andreas@drqueue.org",
		    description=("This is a service of redis subscripe"),
		    license="GPLv3",
		    keywords="redis subscripe",
		    url="https://ssl.xxx.org/redmine/projects/RedisRun",
		    packages=['RedisRun'],  # 需要打包的目录列表

		    # 需要安装的依赖
		    install_requires=[
		        'redis>=2.10.5',
		        'setuptools>=16.0',
		    ],

		    # 添加这个选项，在windows下Python目录的scripts下生成exe文件
		    # 注意：模块与函数之间是冒号:
		    entry_points={'console_scripts': [
		        'redis_run = RedisRun.redis_run:main',
		    ]},

		    # long_description=read('README.md'),
		    classifiers=[  # 程序的所属分类列表
		        "Development Status :: 3 - Alpha",
		        "Topic :: Utilities",
		        "License :: OSI Approved :: GNU General Public License (GPL)",
		    ],
		    # 此项需要，否则卸载时报windows error
		    zip_safe=False
		)
	# 一些参数的使用方法
		from setuptools import setup, find_packages
		setup(
		    packages = find_packages('src'),  # 包含所有src中的包
		    package_dir = {'':'src'},   # 告诉distutils包都在src下

		    package_data = {
		        # 任何包中含有.txt文件，都包含它
		        '': ['*.txt'],
		        # 包含demo包data文件夹中的 *.dat文件
		        'demo': ['data/*.dat'],
		    }
		    entry_points = {
		        'setuptools.installation': [
		            'eggsecutable = demo:test',
		        ]
		    } # 执行python xxx.egg的时候会直接执行demo.test()
		)
	# 程序脚本使用的一些参数
		--name 包名称
		--version (-V) 包版本
		--author 程序的作者
		--author_email 程序的作者的邮箱地址
		--maintainer 维护者
		--maintainer_email 维护者的邮箱地址
		--url 程序的官网地址
		--license 程序的授权信息
		--description 程序的简单描述
		--long_description 程序的详细描述
		--platforms 程序适用的软件平台列表
		--classifiers 程序的所属分类列表
		--keywords 程序的关键字列表
		--packages 需要处理的包目录（包含__init__.py的文件夹） 
		--py_modules 需要打包的python文件列表
		--download_url 程序的下载地址
		--cmdclass 
		--data_files 打包时需要打包的数据文件，如图片，配置文件等
		--scripts 安装时需要执行的脚步列表
		--package_dir 告诉setuptools哪些目录下的文件被映射到哪个源码包。一个例子：package_dir = {'': 'lib'}，表示“root package”中的模块都在lib 目录中。
		--requires 定义依赖哪些模块 
		--provides定义可以为哪些模块提供依赖 
		--find_packages() 对于简单工程来说，手动增加packages参数很容易，刚刚我们用到了这个函数，它默认在和setup.py同一目录下搜索各个含有 __init__.py的包。
		其实我们可以将包统一放在一个src目录中，另外，这个包内可能还有aaa.txt文件和data数据文件夹。另外，也可以排除一些特定的包
		find_packages(exclude=["*.tests", "*.tests.*", "tests.*", "tests"])
		--install_requires = ["requests"] 需要安装的依赖包
		--entry_points 动态发现服务和插件
		# entry_points
			entry_points={'console_scripts': [
		        'redis_run = RedisRun.redis_run:main',
		        # 工具包名字 = 程序入口
			]} # 指定命令行工具 
