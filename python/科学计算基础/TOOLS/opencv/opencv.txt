anaconda 安装
conda install --channel https://conda.anaconda.org/menpo opencv3

同样一个numpy数组在matplotlib和opencv里面都会有不同
所谓的单通道一般是指灰度图也有3通道的灰度图

RGB
都是高度×宽度×通道数

import cv2
import numpy as np

读图和灰度图
print cv2.imread(path) //返回numpy数组
最简单的显示图片
cv2.imshow("name",numpy_array)
cv2.imread(path,cv2.IMREAD_GRAYSCALE)//读取单通道，灰度
c2.waitKey(1000)//ms
cv2.imwrite(path,pic)//path是写入的路径，pic是原图片

写图(格式转换)
cv2.imwrite('test_imwrite.jpg',
 color_img,
 (cv2.IMWRITE_JPEG_QUALITY, 80)
)//三个参数 最后一个指定JEPG或者PNG PNG_COMPRESSION
tuple里面那个参数默认是3,图片质量

缩放，裁剪，补边

缩放
cv2.resize(img, (200, 200)) //缩放
img_200x300 = cv2.resize(img,
 (0, 0), fx=0.5, fy=0.5, 
interpolation=cv2.INTER_NEAREST
)//缩放 最临插值法

补边
cv2.copyMakeBorder(img, 50, 50, 0, 0, 
                   cv2.BORDER_CONSTANT,                                          value=(0, 0, 0))
//生成上下黑边

裁剪
裁剪图片等于裁剪数组//切片去吧

色调，明暗，直方图和Gamma曲线
HSV(Hue)(Saturation)(Value)
//(180) （256） (256)

色调,饱和度,明度(hsv空间)
cv2.cvtColor(img,COLOR_BGR2HSV)//把图像从RGB转换成HSV
这从RGB的三维数组这变成了一个三维数组
调整这个三维数组的值就可以调整图片的3种参数值
//空间总 绿色和黄色的值只差15

关于像素中值分布得需要hist去看
如果hist中的成分过于接近0或者255就可能丢失细节
//亮部细节丢失 暗部细节不足
Gamma是用来提升暗部细节的(non-linear-chage)

计算直方图
hist_b = cv2.calcHist([img], [0], None, [256], [0, 256])
hist_g = cv2.calcHist([img], [1], None, [256], [0, 256])
hist_r = cv2.calcHist([img], [2], None, [256], [0, 256])
//分通道进行计算
cv2.calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate ]])

定义Gamma矫正的函数
def gamma_trans(img, gamma):
    gamma_table = [np.power(x/255.0, gamma)*255.0 for x in range(256)] //先建立一个表根据传入的gamma值
    gamma_table = np.round(np.array(gamma_table)).astype(np.uint8)//改变编码np.round()四舍五入取整
    return cv2.LUT(img, gamma_table)
//cv2.LUT实现这个校正映射

图像的仿射变换
缩放 旋转 剪切 翻转 //线性变换
平移
opencv中 放射变换的矩阵是2X3的矩阵
M=[A B] //其中A是2X2 B是1X2矩阵
//A代表线性变换 B代表平移
T^=A[x,y].T=M[x,y,1].T
原点的位置不是左下角而是左上角
cv2.warpAffine()

img_elephant = cv2.warpAffine(img, M_crop_elephant, (400, 600))
//后面那个是高乘宽
//M_crop_elephant代表变换矩阵 
[1.6, 0, -150],
[0, 1.6, -240]，//这个矩阵最后面代表位移 前面代表空间变换
[cos -sin, 0]
[sin cos, 0]  //这个是单纯旋转变换的

基本绘图
线段 圆 矩形 多边形
canvas=np.zeros((400,600,3))+255 //初始化为白色
cv2.line(canvas,(fromX,fromY),(toX,toY),(r,g,b),2)
cv2.circle(canvas,(circleX,circleY),r,(r,g,b),5)
 //最后一个参数应该是线的粗细
cv2.rectangle(canvas,(),(),(r,g,b))//两个角

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
视频功能

cv2.VideoCapture() //从相机设备获取图像，文件中
cv2.VideoWriter()  //生成视频

interval = 60       	# 捕获图像的间隔，单位：秒
num_frames = 500    	# 捕获图像的总帧数
out_fps = 24        	# 输出文件的帧率

# VideoCapture(0)表示打开默认的相机
cap = cv2.VideoCapture(0) 
# 获取捕获的分辨率
size =(int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
       int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))
//获取捕获的分辨率
# 设置要保存视频的编码，分辨率和帧率

video = cv2.VideoWriter(
    "time_lapse.avi", 
    cv2.VideoWriter_fourcc('M','P','4','2'), 
    out_fps, //帧率
    size
)       
//设置视频要保存的编码分辨率和帧率
cap.read() //可以读帧


# 对于一些低画质的摄像头，前面的帧可能不稳定，略过
for i in range(42):
    cap.read()

# 开始捕获，通过read()函数获取捕获的帧
try:
    for i in range(num_frames):
        _, frame = cap.read()
        video.write(frame)
except KeyboardInterrupt:
    
    # 提前停止捕获
    print('Stopped! {}/{} frames captured!'.format(i, num_frames))

# 释放资源并写入视频文件
video.release()
cap.release()
-------------------------------------------------------
核心代码
cap=cv2.VideoCapture()
video=cv2.VideoWriter()
_,frame=cap.read()
video.write(frame) //写成视屏
-------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
import cv2
import os
import sys

# 第一个输入参数是包含视频片段的路径
input_path = sys.argv[1]

# 第二个输入参数是设定每隔多少帧截取一帧
frame_interval = int(sys.argv[2])

# 列出文件夹下所有的视频文件
filenames = os.listdir(input_path)

# 获取文件夹名称
video_prefix = input_path.split(os.sep)[-1]

# 建立一个新的文件夹，名称为原文件夹名称后加上_frames
frame_path = '{}_frames'.format(input_path)
if not os.path.exists(frame_path):
    os.mkdir(frame_path)

# 初始化一个VideoCapture对象
cap = cv2.VideoCapture()

# 遍历所有文件
for filename in filenames:
    filepath = os.sep.join([input_path, filename])
    
    # VideoCapture::open函数可以从文件获取视频
    cap.open(filepath)
    
    # 获取视频帧数
    n_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    # 同样为了避免视频头几帧质量低下，黑屏或者无关等
    for i in range(42):
        cap.read()
    
    for i in range(n_frames):
        ret, frame = cap.read()
        
        # 每隔frame_interval帧进行一次截屏操作
        if i % frame_interval == 0:
            imagename = '{}_{}_{:0>6d}.jpg'.format(video_prefix, filename.split('.')[0], i)
            imagepath = os.sep.join([frame_path, imagename])
            print('exported {}!'.format(imagepath))
            cv2.imwrite(imagepath, frame)

# 执行结束释放资源
cap.release()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
---------------------------------------------------------
核心代码
cap=cv2.VidoeCapture()
cap.open(filepath)
ret,frame=cap.read()//得遍历不能读一次应该读帧数次
cv2.imwrite(imagepath,frame)
---------------------------------------------------------

增加数据量(数据扰乱层)训练

随机裁剪
计算干扰比例
按照对角线算出裁剪范围

随机旋转
cv2.getRotationMatrix2D(heart,angle,times) 
//可以得到旋转(仿射变换)的矩阵
cv2.warpAffine()//旋转 会出现黑屏 内接矩形裁剪

随机颜色和明暗
//这个还是HSV空间操作的比较好，gamma变换
比起AlexNet论文里在PCA之后的主成分上做扰动的方法，本书用来实现随机的颜色以及明暗的方法相对简单很多，就是给HSV空间的每个通道，分别加上一个微小的扰动。其中对于色调，从-\delta到\delta之间按均匀采样，获取一个随机数\hat \delta作为要扰动的值，然后新的像素值x’为原始像素值x +\hat \delta；对于其他两个空间则是新像素值x’为原始像素值x的(1+\hat \delta)倍，从而实现色调，饱和度和明暗度的扰动。

因为明暗度并不会对图像的直方图相对分布产生大的影响，所以在HSV扰动基础上，考虑再加入一个Gamma扰动，方法是设定一个大于1的Gamma值的上限γ，因为这个值通常会和1是一个量级，再用均匀采样的近似未必合适，所以从-logγ到logγ之间均匀采样一个值α，然后用e^{\alpha} 

作为Gamma值进行变换。

utils
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
import numpy as np
import cv2

'''
定义裁剪函数，四个参数分别是：
左上角横坐标x0
左上角纵坐标y0
裁剪宽度w
裁剪高度h
'''
crop_image = lambda img, x0, y0, w, h: img[y0:y0+h, x0:x0+w]

'''
随机裁剪
area_ratio为裁剪画面占原画面的比例
hw_vari是扰动占原高宽比的比例范围
'''
def random_crop(img, area_ratio, hw_vari):
    h, w = img.shape[:2]
    hw_delta = np.random.uniform(-hw_vari, hw_vari)
    hw_mult = 1 + hw_delta
	
	# 下标进行裁剪，宽高必须是正整数
    w_crop = int(round(w*np.sqrt(area_ratio*hw_mult)))
	
	# 裁剪宽度不可超过原图可裁剪宽度
    if w_crop > w:
        w_crop = w
		
    h_crop = int(round(h*np.sqrt(area_ratio/hw_mult)))
    if h_crop > h:
        h_crop = h
	
	# 随机生成左上角的位置
    x0 = np.random.randint(0, w-w_crop+1)
    y0 = np.random.randint(0, h-h_crop+1)
	
    return crop_image(img, x0, y0, w_crop, h_crop)

'''
定义旋转函数：
angle是逆时针旋转的角度
crop是个布尔值，表明是否要裁剪去除黑边
'''
def rotate_image(img, angle, crop):
    h, w = img.shape[:2]
	
	# 旋转角度的周期是360°
    angle %= 360
	
	# 用OpenCV内置函数计算仿射矩阵
    M_rotate = cv2.getRotationMatrix2D((w/2, h/2), angle, 1)
	
	# 得到旋转后的图像
    img_rotated = cv2.warpAffine(img, M_rotate, (w, h))

	# 如果需要裁剪去除黑边
    if crop:
	    # 对于裁剪角度的等效周期是180°
        angle_crop = angle % 180
		
		# 并且关于90°对称
        if angle_crop > 90:
            angle_crop = 180 - angle_crop
			
		# 转化角度为弧度
        theta = angle_crop * np.pi / 180.0
		
		# 计算高宽比
        hw_ratio = float(h) / float(w)
		
		# 计算裁剪边长系数的分子项
        tan_theta = np.tan(theta)
        numerator = np.cos(theta) + np.sin(theta) * tan_theta
		
		# 计算分母项中和宽高比相关的项
        r = hw_ratio if h > w else 1 / hw_ratio
		
		# 计算分母项
        denominator = r * tan_theta + 1
		
		# 计算最终的边长系数
        crop_mult = numerator / denominator
		
		# 得到裁剪区域
        w_crop = int(round(crop_mult*w))
        h_crop = int(round(crop_mult*h))
        x0 = int((w-w_crop)/2)
        y0 = int((h-h_crop)/2)

        img_rotated = crop_image(img_rotated, x0, y0, w_crop, h_crop)

    return img_rotated

'''
随机旋转
angle_vari是旋转角度的范围[-angle_vari, angle_vari)
p_crop是要进行去黑边裁剪的比例
'''
def random_rotate(img, angle_vari, p_crop):
    angle = np.random.uniform(-angle_vari, angle_vari)
    crop = False if np.random.random() > p_crop else True
    return rotate_image(img, angle, crop)

'''
定义hsv变换函数：
hue_delta是色调变化比例
sat_delta是饱和度变化比例
val_delta是明度变化比例
'''
def hsv_transform(img, hue_delta, sat_mult, val_mult):
    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV).astype(np.float)
    img_hsv[:, :, 0] = (img_hsv[:, :, 0] + hue_delta) % 180
    img_hsv[:, :, 1] *= sat_mult
    img_hsv[:, :, 2] *= val_mult
    img_hsv[img_hsv > 255] = 255
    return cv2.cvtColor(np.round(img_hsv).astype(np.uint8), cv2.COLOR_HSV2BGR)

'''
随机hsv变换
hue_vari是色调变化比例的范围
sat_vari是饱和度变化比例的范围
val_vari是明度变化比例的范围
'''
def random_hsv_transform(img, hue_vari, sat_vari, val_vari):
    hue_delta = np.random.randint(-hue_vari, hue_vari)
    sat_mult = 1 + np.random.uniform(-sat_vari, sat_vari)
    val_mult = 1 + np.random.uniform(-val_vari, val_vari)
    return hsv_transform(img, hue_delta, sat_mult, val_mult)

'''
定义gamma变换函数：
gamma就是Gamma
'''
def gamma_transform(img, gamma):
    gamma_table = [np.power(x / 255.0, gamma) * 255.0 for x in range(256)]
    gamma_table = np.round(np.array(gamma_table)).astype(np.uint8)
    return cv2.LUT(img, gamma_table)

'''
随机gamma变换
gamma_vari是Gamma变化的范围[1/gamma_vari, gamma_vari)
'''
def random_gamma_transform(img, gamma_vari):
    log_gamma_vari = np.log(gamma_vari)
    alpha = np.random.uniform(-log_gamma_vari, log_gamma_vari)
    gamma = np.exp(alpha)
    return gamma_transform(img, gamma)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
以上就是常用的图形化工具
其实可以用numpy的矩阵乘法瞬间完成线性变换

获取键盘输入参数
key = cv2.waitKey()
这样就可以知道用户在干嘛了

