HTML5
<script>
document.createElement("myelement")
</>

media
<canvas> //定义标签图形
<audio>
<video>
<source> //定义video和audio
<embed> //定义潜入内容
<track> //定义媒体的外部文本轨道

<datalist> //定义input可能得知
<keygen>  	//秘钥生成器字段
<output>  //定义不同类型的输出
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
canvas
var id=document.getElementById("canvansID")
var ctx=id.getContext("2d")
//矩形
ctx.fillSytle='red'
ctx.fillRect(0,0,150,75)//location and shape
//划线
ctx.moveTo(0,0)
ctx.lineTo(200,100)
ctx.stroke() //划掉
//圆
ctx.beginPath();
ctx.arc(95,50,40,0,2*Math.PI); 
//x,y,r,start,stop 逆时针画圆
ctx.stroke()
//文本
c.getContext('2d')//这画的是立体字
ctx.font='30px Arial'
ctx.fillText('Hello World',10,50)
//渐变//
createLinearGradient //线性渐变
createRadialGradient //径向渐变 圆渐变
var grd=ctx.createLinearGradient(0,0,200,0)//线性渐变
//0,0--->200,0
grd.addColorStop(0,"red")
grd.addColorStop(1,"white")
//设置渐变停止 01可改变
ctx.fillStyle=grd;//设置fillStyle
ctx.fillRect(10,10,150,80);
//线性渐变的大小和方向指示颜色渐变的快慢然后截取一段
//图片//
var img=document.getElementById('imgTagID')
ctx.drawImage(img,10,10)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//HTML5支持SVG
SVG矢量图
可以被搜索压缩文本编辑器创建和修改
SVG基于XML
//HTML5支持mathml，一种标记数学的语言用来写数学公式
//实现拖放
1.<img draggable='true' ondragstart="drag(event)">
2.<div ondragover="allowDrop(event)" ondrop='drop(event)'>
3.function drag(ev)
{
    ev.dataTransfer.setData("Text",ev.target.id);
    //把数据类型和id存放到ev.dataTransfer中
}
function allowDrop(ev)
{
    ev.preventDefault();
    //阻止默认的event处理
}
function drop(ev)
{
    ev.preventDefault();
    var data=ev.dataTransfer.getData("Text");
    ev.target.appendChild(document.getElementById(data));
}
//html5支持定位
*********************video*********************
<video width="320" height="240" controls>
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.ogg" type="video/ogg">
   //浏览器把可识别的第一个视频格式使用播放
</video>
//video-source配合使用导入视频，支持MP4 WEBM OGG
//同理可以使用audio-source配合来使用MP3 OGG WAV
************************************************
MP4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件
WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件
Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件
**********************************************************
新的input类型
color
date
datetime
datetime-local
email
month
number html5 独有 max min pattern required//必须 step//间隔
<input type="range" name="points" min="1" max="10">//数轴
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<input list='datalistid'>
<datalist id=''> //只是存放数据用的不调用的话不会显示
    <option value=''><option value=''><option value=''>
</>
<keygen>
<form oninput='x.value=parseInt(a.value)'>
<output name='x'>
</>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[     header    ] <header><nav><setion><article><aside>
[      nav      ] <footer>
[ setion  |     ] //框架的语意标签
[ setion  |aside]
[ article |     ]
[ article |     ]
[     footer    ]
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
localStorage和sessionStorge
localStorage.sitename=''
localStorage.key='value'
localStorage.removeItem('key')
.setItem .getItem .removeItem .clear .key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
web sql
database
var db=openDatabase('name','version','descript',size，callbackfunc)
db.transaction(function(tx){tx.excuteSql('')})//支持参数化
//tx :context
tx.excuteSql('select',[],func(context,results){})//第二个参数空查询语句这里不需要用参数
//result是结果集
results.rows.item(i).log //拿出里面元素的值
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
应用程序缓存************
cache manifest
<html manifest='demp.appcache'> //启动缓存
.appcache//manifest文件后缀，在web服务器上配置
CACHE MANIFEST 在此标题下列出的文件将在首次下载后进行缓存
NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存
FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）
//第一行是必须的 该文件用#注释 .appcache作为后缀
CACHE MANIFEST
/theme.css
/logo.gif
/main.js
NETWORK:
login.php //永远不会被缓存
FALLBACK:
/html/ /offline.html //如果缓存失败就用这个文件里面的html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Web Workers //web渗透
后台运行javascript 独立于其他脚本
脚本文件是demo.js 
该脚本里postMessage(data)可以向浏览器传回一些东西
var w=new Worker("demo.js")
w.terminate() //终止webworkers
w.onmessage=function(event){
   alert(event.data) //当postMessage(data)发生时可以监听
}
web worker没法访问windows document parent
var source=new EventSource('url');//和ajax一样返回字符串
source.onmessage=function(event){alert(event.data)}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
webSocket
var Socket=new WebSocket(url,[protocol]); //接受子协议
Socket.readyState //READ-ONLY 0没建立 1建立了 2正在关 3关了
Socket事件open message error close
SOCKET方法
Socket.send()
Socket.close() 
pywebsocket 支持websocket的服务
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
插件
<object data=''></> //可以引用一些资源比如flash html jpg
<embed src=''>//embed可以达到和object同样的效果HTML5

html5视频音频
<video id=''> // controls="controls"
    <source src=''>
</>
<script>
    videoIdInstance.play()
    videpIdInstance.paused() //给button注册
    videpIdInstance.load() //当改变视频来源时候重新加载
    videpIdInstance.autoplay=true;//自动播放得load
    videpIdInstance.currentTime //播放到几秒可以设置可以获得
    videpIdInstance.defaultMuted //默认是否静音
    videpIdInstance.defaultPlaybackRate //默认播放速度
</>
duration 视频长度
loop 重新播放
networkState 网络状态
playbackrate 播放速度
volume 音量
