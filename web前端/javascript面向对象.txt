1.基于json创建对象
	var robot = {
	    name: 'Robot',
	    height: 1.6,
	    run: function () {
	        console.log(this.name + ' is running...');
	    }
	};
	var xiaoming = {
	    name: '小明'
	};
	xiaoming.__proto__ = Student;#__proto__指向robot
	所以小明会run()
	请注意，上述代码仅用于演示目的。在编写JavaScript代码时，不要直接用obj.__proto__去改变一个对象的原型，并且，低版本的IE也无法使用__proto__。Object.create()方法可以传入一个原型对象，
	// 原型对象:
	var Student = {
	    name: 'Robot',
	    height: 1.2,
	    run: function () {
	        console.log(this.name + ' is running...');
	    }
	};

	function createStudent(name) {
	    // 基于Student原型创建一个新对象:
	    var s = Object.create(Student);#Object.create({})这个才是核心
	    // 初始化新对象:
	    s.name = name;
	    return s;
	}

	var xiaoming = createStudent('小明');
	xiaoming.run(); // 小明 is running...
	xiaoming.__proto__ === Student; // true
2.构造函数
	除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：

	function Student(name) {
	    this.name = name;
	    this.hello = function () {
	        alert('Hello, ' + this.name + '!');
	    }
	}
	你会问，咦，这不是一个普通函数吗？
	这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：
	var xiaoming = new Student('小明');
	xiaoming.name; // '小明'
	xiaoming.hello(); // Hello, 小明!
	注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。
	按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，
一个常见的编程模式
	function Student(props) {
	    this.name = props.name || '匿名'; // 默认值为'匿名'
	    this.grade = props.grade || 1; // 默认值为1
	}

	Student.prototype.hello = function () {
	    alert('Hello, ' + this.name + '!');
	};

	function createStudent(props) {
	    return new Student(props || {}) #用||设置默认值精髓
	}
ES6之后可以利用关键字去创建class
class extends