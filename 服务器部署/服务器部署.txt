# 服务器相关
	apache
	tomcat # javaweb
	Ngnix # 负载均衡 支持静态页
	guincorn # flask
	usgi # django


# 部署流程
	首先想让外网访问就必须得到公网ip,而得到这一ip的最佳方式就是云服务器 
	租借已经获得公网ip的服务器是一个非常好的选择
	服务器的操作系统为linux 可以用OpenSSH进行远程登录 xshell就可以完成上述工作
	然后你得把你文件传到服务器上去吧
	git是个很好的工具
	xshell也有自带的工具
	shell脚本也可打开命令行操作 ftp传输文件
	得配置基本环境python/java相关安装包
	然后得配置服务器nginx/tomcat等
# 安装环境命令
	sudo apt install python3-pip
	pip3 install –-upgrade pip 
	pip3 install virtualenv
	pip3 install virtualenvwrapper
	# sudo apt install python-virtualenv
	# sudo easy_install virtualenvwrapper
	# 使用虚拟环境相关
		mkdir vir
		virtualenv -p /usr/bin/python3.6 python3_flask
		mkvirtualenv -p /usr/bin/python3.6 python3_flask
		# 默认保存在 /home/.virtualenvs目录下
	# 虚拟环境的使用
		deactivate 退出虚拟环境
		workon 虚拟环境名 # 切换虚拟环境
		rmvirtualenv # 删除虚拟环境

	pip3 install flask
	pip3 install sqlalchemy
	...
	reboot


	# 安装服务器
	apt-get install build-essential
	apt-get install libtool
	apt-get install nginx
# vim操作
	cat 查看文件内容
	vim + 文件路径名称 不存在就从多少行开始
	保存 :w
	退出 :q 
	强制退出 q!
	打开行号 set nu
	关闭行号 set nonu
# 进程查看和杀死
	ps -ef 
	ps aux
	kill -9 pid
# 三大文本处理工具
	awk，sed，grep
# 一些其他命令
	sudo chmod 
# 开始讲述部署
# Apache 部署
	Apache 最通用的服务器 不过也有着效率相对较低的劣势
	Apache24\conf\httpd.conf 则是服务器的配置文件
	修改第37行,ServerRoot "c:/Apache24" 
	
	Apache24\htdocs 则为默认部署文档
	Apache24\cgi-bin\ 则是cgi文件所放置的位置
	启动httpd.exe 服务器则是开启
	默认端口号在 httpd.conf listen80 # 监听http请求

	<Directory "webname">
		Order Deny,Allow # 添加控制访问策略
		Deny from all
		Allow from 172.25.254.68 # 先读拒绝访问ip在读允许访问ip
	</Directory>
	Apache的虚拟主机技术
	<VirtualHost *:80>
		Servername music.westos.com
		DocumentRoot "/var/www/westos.com/music"
		CustomLog "logs/music.log" combined
	</VirtualHost>
	<Directory "/var/www/westos.com/music">
		Require all granted
	</Directory>
	部署flask
	# 该配置在windows上尚可,在linux上推荐gunicorn
		mod_wsgi模块
		mod_wsgi-express module-config
		得到
		LoadFile
		LoadModule
		WSGIPythonHome 
		并加入到 apache的配置中

		添加虚拟主机
		<VirtualHost *:8080 >
		ServerAdmin example@xx.com
		DocumentRoot E:\Environment\Apache\Apache24\text_web
		<Directory "E:\Environment\Apache\Apache24\text_web">
		Order allow,deny
		Allow from all
		</Directory>
		WSGIScriptAlias / E:\Environment\Apache\Apache24\text_web\test.wsgi
		</VirtualHost>
		项目路径不一定放在apache目录下
		WSGIScriptAlias 这个是wsgi的启动文件 / 表示url前缀

		对flask项目进行配置
		test.wsgi
		import sys
		sys.path.insert(0,"E:/Environment/Apache/Apache24/text_web")
		from test import app as application # test是项目名字(有待测试)
# gunicorn
	gunicorn 是 在unix上应用广泛的高性能python wsgi
	只支持在unix系统上运行起来
	pip3 install gunicorn
	gunicorn -w 4 -b 127.0.0.1:5000 --access-logfile ./logs/log main:app # main.py 里面的app对象
	-w 代表开启多少进程
	-b 绑定到哪个端口
	-D 守护进程的方式运行
# nginx
	# 目录结构
		所有的配置文件都在/etc/nginx下，每个虚拟主机已经安排在了/etc/nginx/sites-available目录下
		启动程序文件在/usr/sbin/nginx

		日志文件放在了/var/log/nginx中，分别是access.log和error.log

		在/etc/init.d/下创建了启动脚本nginx
		默认的虚拟主机的目录设置在了/usr/share/nginx/www

	/usr/local/nginx/config/nginx.config # nginx的配置文件
	upstream flask { # 一组服务器
		server 10.211.55.2:5000;
		server 10.211.55.2:5001;
	}
	server{
		location / { # 主管路由分发 拦截所有/的请求
			proxy_pass http://flask; # 反向代理
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
		}
	}
	# 拦截/static请求 指定静态文件存放的目录
	location /static {
		alias /var/www/projet_name/static;
	}
	sudo /usr/local/nginx/sbin/nginx/sbin/nginx -s reload

