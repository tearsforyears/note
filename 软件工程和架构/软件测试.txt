#问题和品质
问题是指软件运作不正常但无法断定是软件导致的
品质是指提升修改难易度UI等因素
#软件测试的目的
去除缺陷，满足用户的需求，制作出高品质的软件
#verification&validation

是否按照设计图进行开发
是否符合用户需求
狩猎模型kano
基本型需求Must-be Quality:
期望型需求One-dimensional Qualty:
魅力型需求Attractive Quality:

# 软件测试的缺陷导致的结果
	经济损失
	时间浪费
	信用丧失
	死伤事故
# 缺陷难以消除的原因
	人非机器
	软件发展和需求变化
	其他公司竞争
	开发周期


waterFall model:
	Requirements definition
	Basic Design
	Detail Design
	Implementation
	Test{
		Unit test
		integration test 集成
		System test 
	}
V model
	设计与测试对应 V的点为implementation
	
	
黑盒测试
	只关注输入输出进行测试
	划分测试 partition testing
		有效等价类 valid partition //正确的集合
		无效等价类 invalid partition //会出错
	边界值测试 boundary value analysis
		边界值 不能去除
		边界值之上 不能去除
		边界值之下 不能去除
		# 有效等价类的最大最小值 容易漏掉一些边界
		
		不是边界值 and 属于同一有效等价类可以去除值
白盒测试
	conrtol-path-testing
	路径覆盖(所有执行路径)
	语句覆盖(覆盖语句,包括判断)Statement coverage coverage
	
	判定/条件覆盖(每个判断,并不是每个内部条件)Decision coverage/Condition coverage
	每个判断执行一个T F
	多重条件覆盖muti-conditon coverage T,F,F,T
	# 核心考点
		statement coverage # 可达语句执行
		decision condition coverage # 每个判断的true和false要开率
# 黑盒测试与白盒测试实例
	黑盒测试:分阶测试
	90
	80-90
	70-80
	60-70
	59<
	1.partition testing
		25,65,75,85,95,120（非法） #  
	2.boundary value analysis
		# 有效等价类的最大最小值
		边界 101,100,91,90,89,80,79,70,69,60,59,# 0,-1 容易漏掉
	if x!=0:
		y/=x
		if y>0:
			y-=1
	1.statement coverage
		只需要经过一次y/=x 以及 y-=1即可
		所以 一次就可以完全覆盖所有语句
	2.decision condition coverage
		每个条件出现一次TF即可
		故需要三次 x=0 x!=0 y>0 y<=0 两两组合
		因为出现了x!=0才能进行第二次判断 所以总次数为3
# 状态图状态表
	状态表 列标:状态 行标:操作
# 成对测试
	pairwise testing
	可以使用组成因子 以及添加制约条件(constraint)
	pictmaster 可以完成这一工作
	其特点是组合进行测试
		specification-based # 基于规格说明
			(黑盒测试为主)
			等价类划分
			边界值测试
			决策表
			状态转换测试
		structure-based
			statement coverage
			descision coverage
		experienced-based # 基于经验的技术
			error guessing 错误推测
				字符串 特殊符号 半角
				0 数值上下限 
				日期 特殊日子
			exploratory testing 探索性测试

	# 